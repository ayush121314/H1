/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./node_modules/chess.js/dist/esm/chess.js":
/*!*************************************************!*\
  !*** ./node_modules/chess.js/dist/esm/chess.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BISHOP: function() { return /* binding */ BISHOP; },\n/* harmony export */   BLACK: function() { return /* binding */ BLACK; },\n/* harmony export */   Chess: function() { return /* binding */ Chess; },\n/* harmony export */   DEFAULT_POSITION: function() { return /* binding */ DEFAULT_POSITION; },\n/* harmony export */   KING: function() { return /* binding */ KING; },\n/* harmony export */   KNIGHT: function() { return /* binding */ KNIGHT; },\n/* harmony export */   Move: function() { return /* binding */ Move; },\n/* harmony export */   PAWN: function() { return /* binding */ PAWN; },\n/* harmony export */   QUEEN: function() { return /* binding */ QUEEN; },\n/* harmony export */   ROOK: function() { return /* binding */ ROOK; },\n/* harmony export */   SQUARES: function() { return /* binding */ SQUARES; },\n/* harmony export */   WHITE: function() { return /* binding */ WHITE; },\n/* harmony export */   validateFen: function() { return /* binding */ validateFen; }\n/* harmony export */ });\n/**\n * @license\n * Copyright (c) 2025, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\nconst WHITE = 'w';\nconst BLACK = 'b';\nconst PAWN = 'p';\nconst KNIGHT = 'n';\nconst BISHOP = 'b';\nconst ROOK = 'r';\nconst QUEEN = 'q';\nconst KING = 'k';\nconst DEFAULT_POSITION = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\nclass Move {\n    color;\n    from;\n    to;\n    piece;\n    captured;\n    promotion;\n    /**\n     * @deprecated This field is deprecated and will be removed in version 2.0.0.\n     * Please use move descriptor functions instead: `isCapture`, `isPromotion`,\n     * `isEnPassant`, `isKingsideCastle`, `isQueensideCastle`, `isCastle`, and\n     * `isBigPawn`\n     */\n    flags;\n    san;\n    lan;\n    before;\n    after;\n    constructor(chess, internal) {\n        const { color, piece, from, to, flags, captured, promotion } = internal;\n        const fromAlgebraic = algebraic(from);\n        const toAlgebraic = algebraic(to);\n        this.color = color;\n        this.piece = piece;\n        this.from = fromAlgebraic;\n        this.to = toAlgebraic;\n        /*\n         * HACK: The chess['_method']() calls below invoke private methods in the\n         * Chess class to generate SAN and FEN. It's a bit of a hack, but makes the\n         * code cleaner elsewhere.\n         */\n        this.san = chess['_moveToSan'](internal, chess['_moves']({ legal: true }));\n        this.lan = fromAlgebraic + toAlgebraic;\n        this.before = chess.fen();\n        // Generate the FEN for the 'after' key\n        chess['_makeMove'](internal);\n        this.after = chess.fen();\n        chess['_undoMove']();\n        // Build the text representation of the move flags\n        this.flags = '';\n        for (const flag in BITS) {\n            if (BITS[flag] & flags) {\n                this.flags += FLAGS[flag];\n            }\n        }\n        if (captured) {\n            this.captured = captured;\n        }\n        if (promotion) {\n            this.promotion = promotion;\n            this.lan += promotion;\n        }\n    }\n    isCapture() {\n        return this.flags.indexOf(FLAGS['CAPTURE']) > -1;\n    }\n    isPromotion() {\n        return this.flags.indexOf(FLAGS['PROMOTION']) > -1;\n    }\n    isEnPassant() {\n        return this.flags.indexOf(FLAGS['EP_CAPTURE']) > -1;\n    }\n    isKingsideCastle() {\n        return this.flags.indexOf(FLAGS['KSIDE_CASTLE']) > -1;\n    }\n    isQueensideCastle() {\n        return this.flags.indexOf(FLAGS['QSIDE_CASTLE']) > -1;\n    }\n    isBigPawn() {\n        return this.flags.indexOf(FLAGS['BIG_PAWN']) > -1;\n    }\n}\nconst EMPTY = -1;\nconst FLAGS = {\n    NORMAL: 'n',\n    CAPTURE: 'c',\n    BIG_PAWN: 'b',\n    EP_CAPTURE: 'e',\n    PROMOTION: 'p',\n    KSIDE_CASTLE: 'k',\n    QSIDE_CASTLE: 'q',\n};\n// prettier-ignore\nconst SQUARES = [\n    'a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8',\n    'a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7',\n    'a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6',\n    'a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5',\n    'a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4',\n    'a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3',\n    'a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2',\n    'a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1'\n];\nconst BITS = {\n    NORMAL: 1,\n    CAPTURE: 2,\n    BIG_PAWN: 4,\n    EP_CAPTURE: 8,\n    PROMOTION: 16,\n    KSIDE_CASTLE: 32,\n    QSIDE_CASTLE: 64,\n};\n/*\n * NOTES ABOUT 0x88 MOVE GENERATION ALGORITHM\n * ----------------------------------------------------------------------------\n * From https://github.com/jhlywa/chess.js/issues/230\n *\n * A lot of people are confused when they first see the internal representation\n * of chess.js. It uses the 0x88 Move Generation Algorithm which internally\n * stores the board as an 8x16 array. This is purely for efficiency but has a\n * couple of interesting benefits:\n *\n * 1. 0x88 offers a very inexpensive \"off the board\" check. Bitwise AND (&) any\n *    square with 0x88, if the result is non-zero then the square is off the\n *    board. For example, assuming a knight square A8 (0 in 0x88 notation),\n *    there are 8 possible directions in which the knight can move. These\n *    directions are relative to the 8x16 board and are stored in the\n *    PIECE_OFFSETS map. One possible move is A8 - 18 (up one square, and two\n *    squares to the left - which is off the board). 0 - 18 = -18 & 0x88 = 0x88\n *    (because of two-complement representation of -18). The non-zero result\n *    means the square is off the board and the move is illegal. Take the\n *    opposite move (from A8 to C7), 0 + 18 = 18 & 0x88 = 0. A result of zero\n *    means the square is on the board.\n *\n * 2. The relative distance (or difference) between two squares on a 8x16 board\n *    is unique and can be used to inexpensively determine if a piece on a\n *    square can attack any other arbitrary square. For example, let's see if a\n *    pawn on E7 can attack E2. The difference between E7 (20) - E2 (100) is\n *    -80. We add 119 to make the ATTACKS array index non-negative (because the\n *    worst case difference is A8 - H1 = -119). The ATTACKS array contains a\n *    bitmask of pieces that can attack from that distance and direction.\n *    ATTACKS[-80 + 119=39] gives us 24 or 0b11000 in binary. Look at the\n *    PIECE_MASKS map to determine the mask for a given piece type. In our pawn\n *    example, we would check to see if 24 & 0x1 is non-zero, which it is\n *    not. So, naturally, a pawn on E7 can't attack a piece on E2. However, a\n *    rook can since 24 & 0x8 is non-zero. The only thing left to check is that\n *    there are no blocking pieces between E7 and E2. That's where the RAYS\n *    array comes in. It provides an offset (in this case 16) to add to E7 (20)\n *    to check for blocking pieces. E7 (20) + 16 = E6 (36) + 16 = E5 (52) etc.\n */\n// prettier-ignore\n// eslint-disable-next-line\nconst Ox88 = {\n    a8: 0, b8: 1, c8: 2, d8: 3, e8: 4, f8: 5, g8: 6, h8: 7,\n    a7: 16, b7: 17, c7: 18, d7: 19, e7: 20, f7: 21, g7: 22, h7: 23,\n    a6: 32, b6: 33, c6: 34, d6: 35, e6: 36, f6: 37, g6: 38, h6: 39,\n    a5: 48, b5: 49, c5: 50, d5: 51, e5: 52, f5: 53, g5: 54, h5: 55,\n    a4: 64, b4: 65, c4: 66, d4: 67, e4: 68, f4: 69, g4: 70, h4: 71,\n    a3: 80, b3: 81, c3: 82, d3: 83, e3: 84, f3: 85, g3: 86, h3: 87,\n    a2: 96, b2: 97, c2: 98, d2: 99, e2: 100, f2: 101, g2: 102, h2: 103,\n    a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n};\nconst PAWN_OFFSETS = {\n    b: [16, 32, 17, 15],\n    w: [-16, -32, -17, -15],\n};\nconst PIECE_OFFSETS = {\n    n: [-18, -33, -31, -14, 18, 33, 31, 14],\n    b: [-17, -15, 17, 15],\n    r: [-16, 1, 16, -1],\n    q: [-17, -16, -15, 1, 17, 16, 15, -1],\n    k: [-17, -16, -15, 1, 17, 16, 15, -1],\n};\n// prettier-ignore\nconst ATTACKS = [\n    20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20, 0,\n    0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0,\n    0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0,\n    0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0,\n    0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n    24, 24, 24, 24, 24, 24, 56, 0, 56, 24, 24, 24, 24, 24, 24, 0,\n    0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0,\n    0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0,\n    0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0,\n    0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0,\n    20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20\n];\n// prettier-ignore\nconst RAYS = [\n    17, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 15, 0,\n    0, 17, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 15, 0, 0,\n    0, 0, 17, 0, 0, 0, 0, 16, 0, 0, 0, 0, 15, 0, 0, 0,\n    0, 0, 0, 17, 0, 0, 0, 16, 0, 0, 0, 15, 0, 0, 0, 0,\n    0, 0, 0, 0, 17, 0, 0, 16, 0, 0, 15, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 17, 0, 16, 0, 15, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 17, 16, 15, 0, 0, 0, 0, 0, 0, 0,\n    1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, 0,\n    0, 0, 0, 0, 0, 0, -15, -16, -17, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, -15, 0, -16, 0, -17, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, -15, 0, 0, -16, 0, 0, -17, 0, 0, 0, 0, 0,\n    0, 0, 0, -15, 0, 0, 0, -16, 0, 0, 0, -17, 0, 0, 0, 0,\n    0, 0, -15, 0, 0, 0, 0, -16, 0, 0, 0, 0, -17, 0, 0, 0,\n    0, -15, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, -17, 0, 0,\n    -15, 0, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, -17\n];\nconst PIECE_MASKS = { p: 0x1, n: 0x2, b: 0x4, r: 0x8, q: 0x10, k: 0x20 };\nconst SYMBOLS = 'pnbrqkPNBRQK';\nconst PROMOTIONS = [KNIGHT, BISHOP, ROOK, QUEEN];\nconst RANK_1 = 7;\nconst RANK_2 = 6;\n/*\n * const RANK_3 = 5\n * const RANK_4 = 4\n * const RANK_5 = 3\n * const RANK_6 = 2\n */\nconst RANK_7 = 1;\nconst RANK_8 = 0;\nconst SIDES = {\n    [KING]: BITS.KSIDE_CASTLE,\n    [QUEEN]: BITS.QSIDE_CASTLE,\n};\nconst ROOKS = {\n    w: [\n        { square: Ox88.a1, flag: BITS.QSIDE_CASTLE },\n        { square: Ox88.h1, flag: BITS.KSIDE_CASTLE },\n    ],\n    b: [\n        { square: Ox88.a8, flag: BITS.QSIDE_CASTLE },\n        { square: Ox88.h8, flag: BITS.KSIDE_CASTLE },\n    ],\n};\nconst SECOND_RANK = { b: RANK_7, w: RANK_2 };\nconst TERMINATION_MARKERS = ['1-0', '0-1', '1/2-1/2', '*'];\n// Extracts the zero-based rank of an 0x88 square.\nfunction rank(square) {\n    return square >> 4;\n}\n// Extracts the zero-based file of an 0x88 square.\nfunction file(square) {\n    return square & 0xf;\n}\nfunction isDigit(c) {\n    return '0123456789'.indexOf(c) !== -1;\n}\n// Converts a 0x88 square to algebraic notation.\nfunction algebraic(square) {\n    const f = file(square);\n    const r = rank(square);\n    return ('abcdefgh'.substring(f, f + 1) +\n        '87654321'.substring(r, r + 1));\n}\nfunction swapColor(color) {\n    return color === WHITE ? BLACK : WHITE;\n}\nfunction validateFen(fen) {\n    // 1st criterion: 6 space-seperated fields?\n    const tokens = fen.split(/\\s+/);\n    if (tokens.length !== 6) {\n        return {\n            ok: false,\n            error: 'Invalid FEN: must contain six space-delimited fields',\n        };\n    }\n    // 2nd criterion: move number field is a integer value > 0?\n    const moveNumber = parseInt(tokens[5], 10);\n    if (isNaN(moveNumber) || moveNumber <= 0) {\n        return {\n            ok: false,\n            error: 'Invalid FEN: move number must be a positive integer',\n        };\n    }\n    // 3rd criterion: half move counter is an integer >= 0?\n    const halfMoves = parseInt(tokens[4], 10);\n    if (isNaN(halfMoves) || halfMoves < 0) {\n        return {\n            ok: false,\n            error: 'Invalid FEN: half move counter number must be a non-negative integer',\n        };\n    }\n    // 4th criterion: 4th field is a valid e.p.-string?\n    if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n        return { ok: false, error: 'Invalid FEN: en-passant square is invalid' };\n    }\n    // 5th criterion: 3th field is a valid castle-string?\n    if (/[^kKqQ-]/.test(tokens[2])) {\n        return { ok: false, error: 'Invalid FEN: castling availability is invalid' };\n    }\n    // 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)?\n    if (!/^(w|b)$/.test(tokens[1])) {\n        return { ok: false, error: 'Invalid FEN: side-to-move is invalid' };\n    }\n    // 7th criterion: 1st field contains 8 rows?\n    const rows = tokens[0].split('/');\n    if (rows.length !== 8) {\n        return {\n            ok: false,\n            error: \"Invalid FEN: piece data does not contain 8 '/'-delimited rows\",\n        };\n    }\n    // 8th criterion: every row is valid?\n    for (let i = 0; i < rows.length; i++) {\n        // check for right sum of fields AND not two numbers in succession\n        let sumFields = 0;\n        let previousWasNumber = false;\n        for (let k = 0; k < rows[i].length; k++) {\n            if (isDigit(rows[i][k])) {\n                if (previousWasNumber) {\n                    return {\n                        ok: false,\n                        error: 'Invalid FEN: piece data is invalid (consecutive number)',\n                    };\n                }\n                sumFields += parseInt(rows[i][k], 10);\n                previousWasNumber = true;\n            }\n            else {\n                if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n                    return {\n                        ok: false,\n                        error: 'Invalid FEN: piece data is invalid (invalid piece)',\n                    };\n                }\n                sumFields += 1;\n                previousWasNumber = false;\n            }\n        }\n        if (sumFields !== 8) {\n            return {\n                ok: false,\n                error: 'Invalid FEN: piece data is invalid (too many squares in rank)',\n            };\n        }\n    }\n    // 9th criterion: is en-passant square legal?\n    if ((tokens[3][1] == '3' && tokens[1] == 'w') ||\n        (tokens[3][1] == '6' && tokens[1] == 'b')) {\n        return { ok: false, error: 'Invalid FEN: illegal en-passant square' };\n    }\n    // 10th criterion: does chess position contain exact two kings?\n    const kings = [\n        { color: 'white', regex: /K/g },\n        { color: 'black', regex: /k/g },\n    ];\n    for (const { color, regex } of kings) {\n        if (!regex.test(tokens[0])) {\n            return { ok: false, error: `Invalid FEN: missing ${color} king` };\n        }\n        if ((tokens[0].match(regex) || []).length > 1) {\n            return { ok: false, error: `Invalid FEN: too many ${color} kings` };\n        }\n    }\n    // 11th criterion: are any pawns on the first or eighth rows?\n    if (Array.from(rows[0] + rows[7]).some((char) => char.toUpperCase() === 'P')) {\n        return {\n            ok: false,\n            error: 'Invalid FEN: some pawns are on the edge rows',\n        };\n    }\n    return { ok: true };\n}\n// this function is used to uniquely identify ambiguous moves\nfunction getDisambiguator(move, moves) {\n    const from = move.from;\n    const to = move.to;\n    const piece = move.piece;\n    let ambiguities = 0;\n    let sameRank = 0;\n    let sameFile = 0;\n    for (let i = 0, len = moves.length; i < len; i++) {\n        const ambigFrom = moves[i].from;\n        const ambigTo = moves[i].to;\n        const ambigPiece = moves[i].piece;\n        /*\n         * if a move of the same piece type ends on the same to square, we'll need\n         * to add a disambiguator to the algebraic notation\n         */\n        if (piece === ambigPiece && from !== ambigFrom && to === ambigTo) {\n            ambiguities++;\n            if (rank(from) === rank(ambigFrom)) {\n                sameRank++;\n            }\n            if (file(from) === file(ambigFrom)) {\n                sameFile++;\n            }\n        }\n    }\n    if (ambiguities > 0) {\n        if (sameRank > 0 && sameFile > 0) {\n            /*\n             * if there exists a similar moving piece on the same rank and file as\n             * the move in question, use the square as the disambiguator\n             */\n            return algebraic(from);\n        }\n        else if (sameFile > 0) {\n            /*\n             * if the moving piece rests on the same file, use the rank symbol as the\n             * disambiguator\n             */\n            return algebraic(from).charAt(1);\n        }\n        else {\n            // else use the file symbol\n            return algebraic(from).charAt(0);\n        }\n    }\n    return '';\n}\nfunction addMove(moves, color, from, to, piece, captured = undefined, flags = BITS.NORMAL) {\n    const r = rank(to);\n    if (piece === PAWN && (r === RANK_1 || r === RANK_8)) {\n        for (let i = 0; i < PROMOTIONS.length; i++) {\n            const promotion = PROMOTIONS[i];\n            moves.push({\n                color,\n                from,\n                to,\n                piece,\n                captured,\n                promotion,\n                flags: flags | BITS.PROMOTION,\n            });\n        }\n    }\n    else {\n        moves.push({\n            color,\n            from,\n            to,\n            piece,\n            captured,\n            flags,\n        });\n    }\n}\nfunction inferPieceType(san) {\n    let pieceType = san.charAt(0);\n    if (pieceType >= 'a' && pieceType <= 'h') {\n        const matches = san.match(/[a-h]\\d.*[a-h]\\d/);\n        if (matches) {\n            return undefined;\n        }\n        return PAWN;\n    }\n    pieceType = pieceType.toLowerCase();\n    if (pieceType === 'o') {\n        return KING;\n    }\n    return pieceType;\n}\n// parses all of the decorators out of a SAN string\nfunction strippedSan(move) {\n    return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '');\n}\nfunction trimFen(fen) {\n    /*\n     * remove last two fields in FEN string as they're not needed when checking\n     * for repetition\n     */\n    return fen.split(' ').slice(0, 4).join(' ');\n}\nclass Chess {\n    _board = new Array(128);\n    _turn = WHITE;\n    _header = {};\n    _kings = { w: EMPTY, b: EMPTY };\n    _epSquare = -1;\n    _halfMoves = 0;\n    _moveNumber = 0;\n    _history = [];\n    _comments = {};\n    _castling = { w: 0, b: 0 };\n    // tracks number of times a position has been seen for repetition checking\n    _positionCount = {};\n    constructor(fen = DEFAULT_POSITION, { skipValidation = false } = {}) {\n        this.load(fen, { skipValidation });\n    }\n    clear({ preserveHeaders = false } = {}) {\n        this._board = new Array(128);\n        this._kings = { w: EMPTY, b: EMPTY };\n        this._turn = WHITE;\n        this._castling = { w: 0, b: 0 };\n        this._epSquare = EMPTY;\n        this._halfMoves = 0;\n        this._moveNumber = 1;\n        this._history = [];\n        this._comments = {};\n        this._header = preserveHeaders ? this._header : {};\n        this._positionCount = {};\n        /*\n         * Delete the SetUp and FEN headers (if preserved), the board is empty and\n         * these headers don't make sense in this state. They'll get added later\n         * via .load() or .put()\n         */\n        delete this._header['SetUp'];\n        delete this._header['FEN'];\n    }\n    load(fen, { skipValidation = false, preserveHeaders = false } = {}) {\n        let tokens = fen.split(/\\s+/);\n        // append commonly omitted fen tokens\n        if (tokens.length >= 2 && tokens.length < 6) {\n            const adjustments = ['-', '-', '0', '1'];\n            fen = tokens.concat(adjustments.slice(-(6 - tokens.length))).join(' ');\n        }\n        tokens = fen.split(/\\s+/);\n        if (!skipValidation) {\n            const { ok, error } = validateFen(fen);\n            if (!ok) {\n                throw new Error(error);\n            }\n        }\n        const position = tokens[0];\n        let square = 0;\n        this.clear({ preserveHeaders });\n        for (let i = 0; i < position.length; i++) {\n            const piece = position.charAt(i);\n            if (piece === '/') {\n                square += 8;\n            }\n            else if (isDigit(piece)) {\n                square += parseInt(piece, 10);\n            }\n            else {\n                const color = piece < 'a' ? WHITE : BLACK;\n                this._put({ type: piece.toLowerCase(), color }, algebraic(square));\n                square++;\n            }\n        }\n        this._turn = tokens[1];\n        if (tokens[2].indexOf('K') > -1) {\n            this._castling.w |= BITS.KSIDE_CASTLE;\n        }\n        if (tokens[2].indexOf('Q') > -1) {\n            this._castling.w |= BITS.QSIDE_CASTLE;\n        }\n        if (tokens[2].indexOf('k') > -1) {\n            this._castling.b |= BITS.KSIDE_CASTLE;\n        }\n        if (tokens[2].indexOf('q') > -1) {\n            this._castling.b |= BITS.QSIDE_CASTLE;\n        }\n        this._epSquare = tokens[3] === '-' ? EMPTY : Ox88[tokens[3]];\n        this._halfMoves = parseInt(tokens[4], 10);\n        this._moveNumber = parseInt(tokens[5], 10);\n        this._updateSetup(fen);\n        this._incPositionCount(fen);\n    }\n    fen() {\n        let empty = 0;\n        let fen = '';\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n            if (this._board[i]) {\n                if (empty > 0) {\n                    fen += empty;\n                    empty = 0;\n                }\n                const { color, type: piece } = this._board[i];\n                fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n            }\n            else {\n                empty++;\n            }\n            if ((i + 1) & 0x88) {\n                if (empty > 0) {\n                    fen += empty;\n                }\n                if (i !== Ox88.h1) {\n                    fen += '/';\n                }\n                empty = 0;\n                i += 8;\n            }\n        }\n        let castling = '';\n        if (this._castling[WHITE] & BITS.KSIDE_CASTLE) {\n            castling += 'K';\n        }\n        if (this._castling[WHITE] & BITS.QSIDE_CASTLE) {\n            castling += 'Q';\n        }\n        if (this._castling[BLACK] & BITS.KSIDE_CASTLE) {\n            castling += 'k';\n        }\n        if (this._castling[BLACK] & BITS.QSIDE_CASTLE) {\n            castling += 'q';\n        }\n        // do we have an empty castling flag?\n        castling = castling || '-';\n        let epSquare = '-';\n        /*\n         * only print the ep square if en passant is a valid move (pawn is present\n         * and ep capture is not pinned)\n         */\n        if (this._epSquare !== EMPTY) {\n            const bigPawnSquare = this._epSquare + (this._turn === WHITE ? 16 : -16);\n            const squares = [bigPawnSquare + 1, bigPawnSquare - 1];\n            for (const square of squares) {\n                // is the square off the board?\n                if (square & 0x88) {\n                    continue;\n                }\n                const color = this._turn;\n                // is there a pawn that can capture the epSquare?\n                if (this._board[square]?.color === color &&\n                    this._board[square]?.type === PAWN) {\n                    // if the pawn makes an ep capture, does it leave it's king in check?\n                    this._makeMove({\n                        color,\n                        from: square,\n                        to: this._epSquare,\n                        piece: PAWN,\n                        captured: PAWN,\n                        flags: BITS.EP_CAPTURE,\n                    });\n                    const isLegal = !this._isKingAttacked(color);\n                    this._undoMove();\n                    // if ep is legal, break and set the ep square in the FEN output\n                    if (isLegal) {\n                        epSquare = algebraic(this._epSquare);\n                        break;\n                    }\n                }\n            }\n        }\n        return [\n            fen,\n            this._turn,\n            castling,\n            epSquare,\n            this._halfMoves,\n            this._moveNumber,\n        ].join(' ');\n    }\n    /*\n     * Called when the initial board setup is changed with put() or remove().\n     * modifies the SetUp and FEN properties of the header object. If the FEN\n     * is equal to the default position, the SetUp and FEN are deleted the setup\n     * is only updated if history.length is zero, ie moves haven't been made.\n     */\n    _updateSetup(fen) {\n        if (this._history.length > 0)\n            return;\n        if (fen !== DEFAULT_POSITION) {\n            this._header['SetUp'] = '1';\n            this._header['FEN'] = fen;\n        }\n        else {\n            delete this._header['SetUp'];\n            delete this._header['FEN'];\n        }\n    }\n    reset() {\n        this.load(DEFAULT_POSITION);\n    }\n    get(square) {\n        return this._board[Ox88[square]];\n    }\n    put({ type, color }, square) {\n        if (this._put({ type, color }, square)) {\n            this._updateCastlingRights();\n            this._updateEnPassantSquare();\n            this._updateSetup(this.fen());\n            return true;\n        }\n        return false;\n    }\n    _put({ type, color }, square) {\n        // check for piece\n        if (SYMBOLS.indexOf(type.toLowerCase()) === -1) {\n            return false;\n        }\n        // check for valid square\n        if (!(square in Ox88)) {\n            return false;\n        }\n        const sq = Ox88[square];\n        // don't let the user place more than one king\n        if (type == KING &&\n            !(this._kings[color] == EMPTY || this._kings[color] == sq)) {\n            return false;\n        }\n        const currentPieceOnSquare = this._board[sq];\n        // if one of the kings will be replaced by the piece from args, set the `_kings` respective entry to `EMPTY`\n        if (currentPieceOnSquare && currentPieceOnSquare.type === KING) {\n            this._kings[currentPieceOnSquare.color] = EMPTY;\n        }\n        this._board[sq] = { type: type, color: color };\n        if (type === KING) {\n            this._kings[color] = sq;\n        }\n        return true;\n    }\n    remove(square) {\n        const piece = this.get(square);\n        delete this._board[Ox88[square]];\n        if (piece && piece.type === KING) {\n            this._kings[piece.color] = EMPTY;\n        }\n        this._updateCastlingRights();\n        this._updateEnPassantSquare();\n        this._updateSetup(this.fen());\n        return piece;\n    }\n    _updateCastlingRights() {\n        const whiteKingInPlace = this._board[Ox88.e1]?.type === KING &&\n            this._board[Ox88.e1]?.color === WHITE;\n        const blackKingInPlace = this._board[Ox88.e8]?.type === KING &&\n            this._board[Ox88.e8]?.color === BLACK;\n        if (!whiteKingInPlace ||\n            this._board[Ox88.a1]?.type !== ROOK ||\n            this._board[Ox88.a1]?.color !== WHITE) {\n            this._castling.w &= ~BITS.QSIDE_CASTLE;\n        }\n        if (!whiteKingInPlace ||\n            this._board[Ox88.h1]?.type !== ROOK ||\n            this._board[Ox88.h1]?.color !== WHITE) {\n            this._castling.w &= ~BITS.KSIDE_CASTLE;\n        }\n        if (!blackKingInPlace ||\n            this._board[Ox88.a8]?.type !== ROOK ||\n            this._board[Ox88.a8]?.color !== BLACK) {\n            this._castling.b &= ~BITS.QSIDE_CASTLE;\n        }\n        if (!blackKingInPlace ||\n            this._board[Ox88.h8]?.type !== ROOK ||\n            this._board[Ox88.h8]?.color !== BLACK) {\n            this._castling.b &= ~BITS.KSIDE_CASTLE;\n        }\n    }\n    _updateEnPassantSquare() {\n        if (this._epSquare === EMPTY) {\n            return;\n        }\n        const startSquare = this._epSquare + (this._turn === WHITE ? -16 : 16);\n        const currentSquare = this._epSquare + (this._turn === WHITE ? 16 : -16);\n        const attackers = [currentSquare + 1, currentSquare - 1];\n        if (this._board[startSquare] !== null ||\n            this._board[this._epSquare] !== null ||\n            this._board[currentSquare]?.color !== swapColor(this._turn) ||\n            this._board[currentSquare]?.type !== PAWN) {\n            this._epSquare = EMPTY;\n            return;\n        }\n        const canCapture = (square) => !(square & 0x88) &&\n            this._board[square]?.color === this._turn &&\n            this._board[square]?.type === PAWN;\n        if (!attackers.some(canCapture)) {\n            this._epSquare = EMPTY;\n        }\n    }\n    _attacked(color, square, verbose) {\n        const attackers = [];\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n            // did we run off the end of the board\n            if (i & 0x88) {\n                i += 7;\n                continue;\n            }\n            // if empty square or wrong color\n            if (this._board[i] === undefined || this._board[i].color !== color) {\n                continue;\n            }\n            const piece = this._board[i];\n            const difference = i - square;\n            // skip - to/from square are the same\n            if (difference === 0) {\n                continue;\n            }\n            const index = difference + 119;\n            if (ATTACKS[index] & PIECE_MASKS[piece.type]) {\n                if (piece.type === PAWN) {\n                    if ((difference > 0 && piece.color === WHITE) ||\n                        (difference <= 0 && piece.color === BLACK)) {\n                        if (!verbose) {\n                            return true;\n                        }\n                        else {\n                            attackers.push(algebraic(i));\n                        }\n                    }\n                    continue;\n                }\n                // if the piece is a knight or a king\n                if (piece.type === 'n' || piece.type === 'k') {\n                    if (!verbose) {\n                        return true;\n                    }\n                    else {\n                        attackers.push(algebraic(i));\n                        continue;\n                    }\n                }\n                const offset = RAYS[index];\n                let j = i + offset;\n                let blocked = false;\n                while (j !== square) {\n                    if (this._board[j] != null) {\n                        blocked = true;\n                        break;\n                    }\n                    j += offset;\n                }\n                if (!blocked) {\n                    if (!verbose) {\n                        return true;\n                    }\n                    else {\n                        attackers.push(algebraic(i));\n                        continue;\n                    }\n                }\n            }\n        }\n        if (verbose) {\n            return attackers;\n        }\n        else {\n            return false;\n        }\n    }\n    attackers(square, attackedBy) {\n        if (!attackedBy) {\n            return this._attacked(this._turn, Ox88[square], true);\n        }\n        else {\n            return this._attacked(attackedBy, Ox88[square], true);\n        }\n    }\n    _isKingAttacked(color) {\n        const square = this._kings[color];\n        return square === -1 ? false : this._attacked(swapColor(color), square);\n    }\n    isAttacked(square, attackedBy) {\n        return this._attacked(attackedBy, Ox88[square]);\n    }\n    isCheck() {\n        return this._isKingAttacked(this._turn);\n    }\n    inCheck() {\n        return this.isCheck();\n    }\n    isCheckmate() {\n        return this.isCheck() && this._moves().length === 0;\n    }\n    isStalemate() {\n        return !this.isCheck() && this._moves().length === 0;\n    }\n    isInsufficientMaterial() {\n        /*\n         * k.b. vs k.b. (of opposite colors) with mate in 1:\n         * 8/8/8/8/1b6/8/B1k5/K7 b - - 0 1\n         *\n         * k.b. vs k.n. with mate in 1:\n         * 8/8/8/8/1n6/8/B7/K1k5 b - - 2 1\n         */\n        const pieces = {\n            b: 0,\n            n: 0,\n            r: 0,\n            q: 0,\n            k: 0,\n            p: 0,\n        };\n        const bishops = [];\n        let numPieces = 0;\n        let squareColor = 0;\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n            squareColor = (squareColor + 1) % 2;\n            if (i & 0x88) {\n                i += 7;\n                continue;\n            }\n            const piece = this._board[i];\n            if (piece) {\n                pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1;\n                if (piece.type === BISHOP) {\n                    bishops.push(squareColor);\n                }\n                numPieces++;\n            }\n        }\n        // k vs. k\n        if (numPieces === 2) {\n            return true;\n        }\n        else if (\n        // k vs. kn .... or .... k vs. kb\n        numPieces === 3 &&\n            (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)) {\n            return true;\n        }\n        else if (numPieces === pieces[BISHOP] + 2) {\n            // kb vs. kb where any number of bishops are all on the same color\n            let sum = 0;\n            const len = bishops.length;\n            for (let i = 0; i < len; i++) {\n                sum += bishops[i];\n            }\n            if (sum === 0 || sum === len) {\n                return true;\n            }\n        }\n        return false;\n    }\n    isThreefoldRepetition() {\n        return this._getPositionCount(this.fen()) >= 3;\n    }\n    isDrawByFiftyMoves() {\n        return this._halfMoves >= 100; // 50 moves per side = 100 half moves\n    }\n    isDraw() {\n        return (this.isDrawByFiftyMoves() ||\n            this.isStalemate() ||\n            this.isInsufficientMaterial() ||\n            this.isThreefoldRepetition());\n    }\n    isGameOver() {\n        return this.isCheckmate() || this.isStalemate() || this.isDraw();\n    }\n    moves({ verbose = false, square = undefined, piece = undefined, } = {}) {\n        const moves = this._moves({ square, piece });\n        if (verbose) {\n            return moves.map((move) => new Move(this, move));\n        }\n        else {\n            return moves.map((move) => this._moveToSan(move, moves));\n        }\n    }\n    _moves({ legal = true, piece = undefined, square = undefined, } = {}) {\n        const forSquare = square ? square.toLowerCase() : undefined;\n        const forPiece = piece?.toLowerCase();\n        const moves = [];\n        const us = this._turn;\n        const them = swapColor(us);\n        let firstSquare = Ox88.a8;\n        let lastSquare = Ox88.h1;\n        let singleSquare = false;\n        // are we generating moves for a single square?\n        if (forSquare) {\n            // illegal square, return empty moves\n            if (!(forSquare in Ox88)) {\n                return [];\n            }\n            else {\n                firstSquare = lastSquare = Ox88[forSquare];\n                singleSquare = true;\n            }\n        }\n        for (let from = firstSquare; from <= lastSquare; from++) {\n            // did we run off the end of the board\n            if (from & 0x88) {\n                from += 7;\n                continue;\n            }\n            // empty square or opponent, skip\n            if (!this._board[from] || this._board[from].color === them) {\n                continue;\n            }\n            const { type } = this._board[from];\n            let to;\n            if (type === PAWN) {\n                if (forPiece && forPiece !== type)\n                    continue;\n                // single square, non-capturing\n                to = from + PAWN_OFFSETS[us][0];\n                if (!this._board[to]) {\n                    addMove(moves, us, from, to, PAWN);\n                    // double square\n                    to = from + PAWN_OFFSETS[us][1];\n                    if (SECOND_RANK[us] === rank(from) && !this._board[to]) {\n                        addMove(moves, us, from, to, PAWN, undefined, BITS.BIG_PAWN);\n                    }\n                }\n                // pawn captures\n                for (let j = 2; j < 4; j++) {\n                    to = from + PAWN_OFFSETS[us][j];\n                    if (to & 0x88)\n                        continue;\n                    if (this._board[to]?.color === them) {\n                        addMove(moves, us, from, to, PAWN, this._board[to].type, BITS.CAPTURE);\n                    }\n                    else if (to === this._epSquare) {\n                        addMove(moves, us, from, to, PAWN, PAWN, BITS.EP_CAPTURE);\n                    }\n                }\n            }\n            else {\n                if (forPiece && forPiece !== type)\n                    continue;\n                for (let j = 0, len = PIECE_OFFSETS[type].length; j < len; j++) {\n                    const offset = PIECE_OFFSETS[type][j];\n                    to = from;\n                    while (true) {\n                        to += offset;\n                        if (to & 0x88)\n                            break;\n                        if (!this._board[to]) {\n                            addMove(moves, us, from, to, type);\n                        }\n                        else {\n                            // own color, stop loop\n                            if (this._board[to].color === us)\n                                break;\n                            addMove(moves, us, from, to, type, this._board[to].type, BITS.CAPTURE);\n                            break;\n                        }\n                        /* break, if knight or king */\n                        if (type === KNIGHT || type === KING)\n                            break;\n                    }\n                }\n            }\n        }\n        /*\n         * check for castling if we're:\n         *   a) generating all moves, or\n         *   b) doing single square move generation on the king's square\n         */\n        if (forPiece === undefined || forPiece === KING) {\n            if (!singleSquare || lastSquare === this._kings[us]) {\n                // king-side castling\n                if (this._castling[us] & BITS.KSIDE_CASTLE) {\n                    const castlingFrom = this._kings[us];\n                    const castlingTo = castlingFrom + 2;\n                    if (!this._board[castlingFrom + 1] &&\n                        !this._board[castlingTo] &&\n                        !this._attacked(them, this._kings[us]) &&\n                        !this._attacked(them, castlingFrom + 1) &&\n                        !this._attacked(them, castlingTo)) {\n                        addMove(moves, us, this._kings[us], castlingTo, KING, undefined, BITS.KSIDE_CASTLE);\n                    }\n                }\n                // queen-side castling\n                if (this._castling[us] & BITS.QSIDE_CASTLE) {\n                    const castlingFrom = this._kings[us];\n                    const castlingTo = castlingFrom - 2;\n                    if (!this._board[castlingFrom - 1] &&\n                        !this._board[castlingFrom - 2] &&\n                        !this._board[castlingFrom - 3] &&\n                        !this._attacked(them, this._kings[us]) &&\n                        !this._attacked(them, castlingFrom - 1) &&\n                        !this._attacked(them, castlingTo)) {\n                        addMove(moves, us, this._kings[us], castlingTo, KING, undefined, BITS.QSIDE_CASTLE);\n                    }\n                }\n            }\n        }\n        /*\n         * return all pseudo-legal moves (this includes moves that allow the king\n         * to be captured)\n         */\n        if (!legal || this._kings[us] === -1) {\n            return moves;\n        }\n        // filter out illegal moves\n        const legalMoves = [];\n        for (let i = 0, len = moves.length; i < len; i++) {\n            this._makeMove(moves[i]);\n            if (!this._isKingAttacked(us)) {\n                legalMoves.push(moves[i]);\n            }\n            this._undoMove();\n        }\n        return legalMoves;\n    }\n    move(move, { strict = false } = {}) {\n        /*\n         * The move function can be called with in the following parameters:\n         *\n         * .move('Nxb7')       <- argument is a case-sensitive SAN string\n         *\n         * .move({ from: 'h7', <- argument is a move object\n         *         to :'h8',\n         *         promotion: 'q' })\n         *\n         *\n         * An optional strict argument may be supplied to tell chess.js to\n         * strictly follow the SAN specification.\n         */\n        let moveObj = null;\n        if (typeof move === 'string') {\n            moveObj = this._moveFromSan(move, strict);\n        }\n        else if (typeof move === 'object') {\n            const moves = this._moves();\n            // convert the pretty move object to an ugly move object\n            for (let i = 0, len = moves.length; i < len; i++) {\n                if (move.from === algebraic(moves[i].from) &&\n                    move.to === algebraic(moves[i].to) &&\n                    (!('promotion' in moves[i]) || move.promotion === moves[i].promotion)) {\n                    moveObj = moves[i];\n                    break;\n                }\n            }\n        }\n        // failed to find move\n        if (!moveObj) {\n            if (typeof move === 'string') {\n                throw new Error(`Invalid move: ${move}`);\n            }\n            else {\n                throw new Error(`Invalid move: ${JSON.stringify(move)}`);\n            }\n        }\n        /*\n         * need to make a copy of move because we can't generate SAN after the move\n         * is made\n         */\n        const prettyMove = new Move(this, moveObj);\n        this._makeMove(moveObj);\n        this._incPositionCount(prettyMove.after);\n        return prettyMove;\n    }\n    _push(move) {\n        this._history.push({\n            move,\n            kings: { b: this._kings.b, w: this._kings.w },\n            turn: this._turn,\n            castling: { b: this._castling.b, w: this._castling.w },\n            epSquare: this._epSquare,\n            halfMoves: this._halfMoves,\n            moveNumber: this._moveNumber,\n        });\n    }\n    _makeMove(move) {\n        const us = this._turn;\n        const them = swapColor(us);\n        this._push(move);\n        this._board[move.to] = this._board[move.from];\n        delete this._board[move.from];\n        // if ep capture, remove the captured pawn\n        if (move.flags & BITS.EP_CAPTURE) {\n            if (this._turn === BLACK) {\n                delete this._board[move.to - 16];\n            }\n            else {\n                delete this._board[move.to + 16];\n            }\n        }\n        // if pawn promotion, replace with new piece\n        if (move.promotion) {\n            this._board[move.to] = { type: move.promotion, color: us };\n        }\n        // if we moved the king\n        if (this._board[move.to].type === KING) {\n            this._kings[us] = move.to;\n            // if we castled, move the rook next to the king\n            if (move.flags & BITS.KSIDE_CASTLE) {\n                const castlingTo = move.to - 1;\n                const castlingFrom = move.to + 1;\n                this._board[castlingTo] = this._board[castlingFrom];\n                delete this._board[castlingFrom];\n            }\n            else if (move.flags & BITS.QSIDE_CASTLE) {\n                const castlingTo = move.to + 1;\n                const castlingFrom = move.to - 2;\n                this._board[castlingTo] = this._board[castlingFrom];\n                delete this._board[castlingFrom];\n            }\n            // turn off castling\n            this._castling[us] = 0;\n        }\n        // turn off castling if we move a rook\n        if (this._castling[us]) {\n            for (let i = 0, len = ROOKS[us].length; i < len; i++) {\n                if (move.from === ROOKS[us][i].square &&\n                    this._castling[us] & ROOKS[us][i].flag) {\n                    this._castling[us] ^= ROOKS[us][i].flag;\n                    break;\n                }\n            }\n        }\n        // turn off castling if we capture a rook\n        if (this._castling[them]) {\n            for (let i = 0, len = ROOKS[them].length; i < len; i++) {\n                if (move.to === ROOKS[them][i].square &&\n                    this._castling[them] & ROOKS[them][i].flag) {\n                    this._castling[them] ^= ROOKS[them][i].flag;\n                    break;\n                }\n            }\n        }\n        // if big pawn move, update the en passant square\n        if (move.flags & BITS.BIG_PAWN) {\n            if (us === BLACK) {\n                this._epSquare = move.to - 16;\n            }\n            else {\n                this._epSquare = move.to + 16;\n            }\n        }\n        else {\n            this._epSquare = EMPTY;\n        }\n        // reset the 50 move counter if a pawn is moved or a piece is captured\n        if (move.piece === PAWN) {\n            this._halfMoves = 0;\n        }\n        else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n            this._halfMoves = 0;\n        }\n        else {\n            this._halfMoves++;\n        }\n        if (us === BLACK) {\n            this._moveNumber++;\n        }\n        this._turn = them;\n    }\n    undo() {\n        const move = this._undoMove();\n        if (move) {\n            const prettyMove = new Move(this, move);\n            this._decPositionCount(prettyMove.after);\n            return prettyMove;\n        }\n        return null;\n    }\n    _undoMove() {\n        const old = this._history.pop();\n        if (old === undefined) {\n            return null;\n        }\n        const move = old.move;\n        this._kings = old.kings;\n        this._turn = old.turn;\n        this._castling = old.castling;\n        this._epSquare = old.epSquare;\n        this._halfMoves = old.halfMoves;\n        this._moveNumber = old.moveNumber;\n        const us = this._turn;\n        const them = swapColor(us);\n        this._board[move.from] = this._board[move.to];\n        this._board[move.from].type = move.piece; // to undo any promotions\n        delete this._board[move.to];\n        if (move.captured) {\n            if (move.flags & BITS.EP_CAPTURE) {\n                // en passant capture\n                let index;\n                if (us === BLACK) {\n                    index = move.to - 16;\n                }\n                else {\n                    index = move.to + 16;\n                }\n                this._board[index] = { type: PAWN, color: them };\n            }\n            else {\n                // regular capture\n                this._board[move.to] = { type: move.captured, color: them };\n            }\n        }\n        if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n            let castlingTo, castlingFrom;\n            if (move.flags & BITS.KSIDE_CASTLE) {\n                castlingTo = move.to + 1;\n                castlingFrom = move.to - 1;\n            }\n            else {\n                castlingTo = move.to - 2;\n                castlingFrom = move.to + 1;\n            }\n            this._board[castlingTo] = this._board[castlingFrom];\n            delete this._board[castlingFrom];\n        }\n        return move;\n    }\n    pgn({ newline = '\\n', maxWidth = 0, } = {}) {\n        /*\n         * using the specification from http://www.chessclub.com/help/PGN-spec\n         * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n         */\n        const result = [];\n        let headerExists = false;\n        /* add the PGN header information */\n        for (const i in this._header) {\n            /*\n             * TODO: order of enumerated properties in header object is not\n             * guaranteed, see ECMA-262 spec (section 12.6.4)\n             */\n            result.push('[' + i + ' \"' + this._header[i] + '\"]' + newline);\n            headerExists = true;\n        }\n        if (headerExists && this._history.length) {\n            result.push(newline);\n        }\n        const appendComment = (moveString) => {\n            const comment = this._comments[this.fen()];\n            if (typeof comment !== 'undefined') {\n                const delimiter = moveString.length > 0 ? ' ' : '';\n                moveString = `${moveString}${delimiter}{${comment}}`;\n            }\n            return moveString;\n        };\n        // pop all of history onto reversed_history\n        const reversedHistory = [];\n        while (this._history.length > 0) {\n            reversedHistory.push(this._undoMove());\n        }\n        const moves = [];\n        let moveString = '';\n        // special case of a commented starting position with no moves\n        if (reversedHistory.length === 0) {\n            moves.push(appendComment(''));\n        }\n        // build the list of moves.  a move_string looks like: \"3. e3 e6\"\n        while (reversedHistory.length > 0) {\n            moveString = appendComment(moveString);\n            const move = reversedHistory.pop();\n            // make TypeScript stop complaining about move being undefined\n            if (!move) {\n                break;\n            }\n            // if the position started with black to move, start PGN with #. ...\n            if (!this._history.length && move.color === 'b') {\n                const prefix = `${this._moveNumber}. ...`;\n                // is there a comment preceding the first move?\n                moveString = moveString ? `${moveString} ${prefix}` : prefix;\n            }\n            else if (move.color === 'w') {\n                // store the previous generated move_string if we have one\n                if (moveString.length) {\n                    moves.push(moveString);\n                }\n                moveString = this._moveNumber + '.';\n            }\n            moveString =\n                moveString + ' ' + this._moveToSan(move, this._moves({ legal: true }));\n            this._makeMove(move);\n        }\n        // are there any other leftover moves?\n        if (moveString.length) {\n            moves.push(appendComment(moveString));\n        }\n        // is there a result?\n        if (typeof this._header.Result !== 'undefined') {\n            moves.push(this._header.Result);\n        }\n        /*\n         * history should be back to what it was before we started generating PGN,\n         * so join together moves\n         */\n        if (maxWidth === 0) {\n            return result.join('') + moves.join(' ');\n        }\n        // TODO (jah): huh?\n        const strip = function () {\n            if (result.length > 0 && result[result.length - 1] === ' ') {\n                result.pop();\n                return true;\n            }\n            return false;\n        };\n        // NB: this does not preserve comment whitespace.\n        const wrapComment = function (width, move) {\n            for (const token of move.split(' ')) {\n                if (!token) {\n                    continue;\n                }\n                if (width + token.length > maxWidth) {\n                    while (strip()) {\n                        width--;\n                    }\n                    result.push(newline);\n                    width = 0;\n                }\n                result.push(token);\n                width += token.length;\n                result.push(' ');\n                width++;\n            }\n            if (strip()) {\n                width--;\n            }\n            return width;\n        };\n        // wrap the PGN output at max_width\n        let currentWidth = 0;\n        for (let i = 0; i < moves.length; i++) {\n            if (currentWidth + moves[i].length > maxWidth) {\n                if (moves[i].includes('{')) {\n                    currentWidth = wrapComment(currentWidth, moves[i]);\n                    continue;\n                }\n            }\n            // if the current move will push past max_width\n            if (currentWidth + moves[i].length > maxWidth && i !== 0) {\n                // don't end the line with whitespace\n                if (result[result.length - 1] === ' ') {\n                    result.pop();\n                }\n                result.push(newline);\n                currentWidth = 0;\n            }\n            else if (i !== 0) {\n                result.push(' ');\n                currentWidth++;\n            }\n            result.push(moves[i]);\n            currentWidth += moves[i].length;\n        }\n        return result.join('');\n    }\n    /*\n     * @deprecated Use `setHeader` and `getHeaders` instead.\n     */\n    header(...args) {\n        for (let i = 0; i < args.length; i += 2) {\n            if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\n                this._header[args[i]] = args[i + 1];\n            }\n        }\n        return this._header;\n    }\n    setHeader(key, value) {\n        this._header[key] = value;\n        return this._header;\n    }\n    removeHeader(key) {\n        if (key in this._header) {\n            delete this._header[key];\n            return true;\n        }\n        return false;\n    }\n    getHeaders() {\n        return this._header;\n    }\n    loadPgn(pgn, { strict = false, newlineChar = '\\r?\\n', } = {}) {\n        function mask(str) {\n            return str.replace(/\\\\/g, '\\\\');\n        }\n        function parsePgnHeader(header) {\n            const headerObj = {};\n            const headers = header.split(new RegExp(mask(newlineChar)));\n            let key = '';\n            let value = '';\n            for (let i = 0; i < headers.length; i++) {\n                const regex = /^\\s*\\[\\s*([A-Za-z]+)\\s*\"(.*)\"\\s*\\]\\s*$/;\n                key = headers[i].replace(regex, '$1');\n                value = headers[i].replace(regex, '$2');\n                if (key.trim().length > 0) {\n                    headerObj[key] = value;\n                }\n            }\n            return headerObj;\n        }\n        // strip whitespace from head/tail of PGN block\n        pgn = pgn.trim();\n        /*\n         * RegExp to split header. Takes advantage of the fact that header and movetext\n         * will always have a blank line between them (ie, two newline_char's). Handles\n         * case where movetext is empty by matching newlineChar until end of string is\n         * matched - effectively trimming from the end extra newlineChar.\n         *\n         * With default newline_char, will equal:\n         * /^(\\[((?:\\r?\\n)|.)*\\])((?:\\s*\\r?\\n){2}|(?:\\s*\\r?\\n)*$)/\n         */\n        const headerRegex = new RegExp('^(\\\\[((?:' +\n            mask(newlineChar) +\n            ')|.)*\\\\])' +\n            '((?:\\\\s*' +\n            mask(newlineChar) +\n            '){2}|(?:\\\\s*' +\n            mask(newlineChar) +\n            ')*$)');\n        // If no header given, begin with moves.\n        const headerRegexResults = headerRegex.exec(pgn);\n        const headerString = headerRegexResults\n            ? headerRegexResults.length >= 2\n                ? headerRegexResults[1]\n                : ''\n            : '';\n        // Put the board in the starting position\n        this.reset();\n        // parse PGN header\n        const headers = parsePgnHeader(headerString);\n        let fen = '';\n        for (const key in headers) {\n            // check to see user is including fen (possibly with wrong tag case)\n            if (key.toLowerCase() === 'fen') {\n                fen = headers[key];\n            }\n            this.header(key, headers[key]);\n        }\n        /*\n         * the permissive parser should attempt to load a fen tag, even if it's the\n         * wrong case and doesn't include a corresponding [SetUp \"1\"] tag\n         */\n        if (!strict) {\n            if (fen) {\n                this.load(fen, { preserveHeaders: true });\n            }\n        }\n        else {\n            /*\n             * strict parser - load the starting position indicated by [Setup '1']\n             * and [FEN position]\n             */\n            if (headers['SetUp'] === '1') {\n                if (!('FEN' in headers)) {\n                    throw new Error('Invalid PGN: FEN tag must be supplied with SetUp tag');\n                }\n                // don't clear the headers when loading\n                this.load(headers['FEN'], { preserveHeaders: true });\n            }\n        }\n        /*\n         * NB: the regexes below that delete move numbers, recursive annotations,\n         * and numeric annotation glyphs may also match text in comments. To\n         * prevent this, we transform comments by hex-encoding them in place and\n         * decoding them again after the other tokens have been deleted.\n         *\n         * While the spec states that PGN files should be ASCII encoded, we use\n         * {en,de}codeURIComponent here to support arbitrary UTF8 as a convenience\n         * for modern users\n         */\n        function toHex(s) {\n            return Array.from(s)\n                .map(function (c) {\n                /*\n                 * encodeURI doesn't transform most ASCII characters, so we handle\n                 * these ourselves\n                 */\n                return c.charCodeAt(0) < 128\n                    ? c.charCodeAt(0).toString(16)\n                    : encodeURIComponent(c).replace(/%/g, '').toLowerCase();\n            })\n                .join('');\n        }\n        function fromHex(s) {\n            return s.length == 0\n                ? ''\n                : decodeURIComponent('%' + (s.match(/.{1,2}/g) || []).join('%'));\n        }\n        const encodeComment = function (s) {\n            s = s.replace(new RegExp(mask(newlineChar), 'g'), ' ');\n            return `{${toHex(s.slice(1, s.length - 1))}}`;\n        };\n        const decodeComment = function (s) {\n            if (s.startsWith('{') && s.endsWith('}')) {\n                return fromHex(s.slice(1, s.length - 1));\n            }\n        };\n        // delete header to get the moves\n        let ms = pgn\n            .replace(headerString, '')\n            .replace(\n        // encode comments so they don't get deleted below\n        new RegExp(`({[^}]*})+?|;([^${mask(newlineChar)}]*)`, 'g'), function (_match, bracket, semicolon) {\n            return bracket !== undefined\n                ? encodeComment(bracket)\n                : ' ' + encodeComment(`{${semicolon.slice(1)}}`);\n        })\n            .replace(new RegExp(mask(newlineChar), 'g'), ' ');\n        // delete recursive annotation variations\n        const ravRegex = /(\\([^()]+\\))+?/g;\n        while (ravRegex.test(ms)) {\n            ms = ms.replace(ravRegex, '');\n        }\n        // delete move numbers\n        ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '');\n        // delete ... indicating black to move\n        ms = ms.replace(/\\.\\.\\./g, '');\n        /* delete numeric annotation glyphs */\n        ms = ms.replace(/\\$\\d+/g, '');\n        // trim and get array of moves\n        let moves = ms.trim().split(new RegExp(/\\s+/));\n        // delete empty entries\n        moves = moves.filter((move) => move !== '');\n        let result = '';\n        for (let halfMove = 0; halfMove < moves.length; halfMove++) {\n            const comment = decodeComment(moves[halfMove]);\n            if (comment !== undefined) {\n                this._comments[this.fen()] = comment;\n                continue;\n            }\n            const move = this._moveFromSan(moves[halfMove], strict);\n            // invalid move\n            if (move == null) {\n                // was the move an end of game marker\n                if (TERMINATION_MARKERS.indexOf(moves[halfMove]) > -1) {\n                    result = moves[halfMove];\n                }\n                else {\n                    throw new Error(`Invalid move in PGN: ${moves[halfMove]}`);\n                }\n            }\n            else {\n                // reset the end of game marker if making a valid move\n                result = '';\n                this._makeMove(move);\n                this._incPositionCount(this.fen());\n            }\n        }\n        /*\n         * Per section 8.2.6 of the PGN spec, the Result tag pair must match match\n         * the termination marker. Only do this when headers are present, but the\n         * result tag is missing\n         */\n        if (result && Object.keys(this._header).length && !this._header['Result']) {\n            this.header('Result', result);\n        }\n    }\n    /*\n     * Convert a move from 0x88 coordinates to Standard Algebraic Notation\n     * (SAN)\n     *\n     * @param {boolean} strict Use the strict SAN parser. It will throw errors\n     * on overly disambiguated moves (see below):\n     *\n     * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n     * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n     * 4. ... Ne7 is technically the valid SAN\n     */\n    _moveToSan(move, moves) {\n        let output = '';\n        if (move.flags & BITS.KSIDE_CASTLE) {\n            output = 'O-O';\n        }\n        else if (move.flags & BITS.QSIDE_CASTLE) {\n            output = 'O-O-O';\n        }\n        else {\n            if (move.piece !== PAWN) {\n                const disambiguator = getDisambiguator(move, moves);\n                output += move.piece.toUpperCase() + disambiguator;\n            }\n            if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n                if (move.piece === PAWN) {\n                    output += algebraic(move.from)[0];\n                }\n                output += 'x';\n            }\n            output += algebraic(move.to);\n            if (move.promotion) {\n                output += '=' + move.promotion.toUpperCase();\n            }\n        }\n        this._makeMove(move);\n        if (this.isCheck()) {\n            if (this.isCheckmate()) {\n                output += '#';\n            }\n            else {\n                output += '+';\n            }\n        }\n        this._undoMove();\n        return output;\n    }\n    // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n    _moveFromSan(move, strict = false) {\n        // strip off any move decorations: e.g Nf3+?! becomes Nf3\n        const cleanMove = strippedSan(move);\n        let pieceType = inferPieceType(cleanMove);\n        let moves = this._moves({ legal: true, piece: pieceType });\n        // strict parser\n        for (let i = 0, len = moves.length; i < len; i++) {\n            if (cleanMove === strippedSan(this._moveToSan(moves[i], moves))) {\n                return moves[i];\n            }\n        }\n        // the strict parser failed\n        if (strict) {\n            return null;\n        }\n        let piece = undefined;\n        let matches = undefined;\n        let from = undefined;\n        let to = undefined;\n        let promotion = undefined;\n        /*\n         * The default permissive (non-strict) parser allows the user to parse\n         * non-standard chess notations. This parser is only run after the strict\n         * Standard Algebraic Notation (SAN) parser has failed.\n         *\n         * When running the permissive parser, we'll run a regex to grab the piece, the\n         * to/from square, and an optional promotion piece. This regex will\n         * parse common non-standard notation like: Pe2-e4, Rc1c4, Qf3xf7,\n         * f7f8q, b1c3\n         *\n         * NOTE: Some positions and moves may be ambiguous when using the permissive\n         * parser. For example, in this position: 6k1/8/8/B7/8/8/8/BN4K1 w - - 0 1,\n         * the move b1c3 may be interpreted as Nc3 or B1c3 (a disambiguated bishop\n         * move). In these cases, the permissive parser will default to the most\n         * basic interpretation (which is b1c3 parsing to Nc3).\n         */\n        let overlyDisambiguated = false;\n        matches = cleanMove.match(/([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/);\n        if (matches) {\n            piece = matches[1];\n            from = matches[2];\n            to = matches[3];\n            promotion = matches[4];\n            if (from.length == 1) {\n                overlyDisambiguated = true;\n            }\n        }\n        else {\n            /*\n             * The [a-h]?[1-8]? portion of the regex below handles moves that may be\n             * overly disambiguated (e.g. Nge7 is unnecessary and non-standard when\n             * there is one legal knight move to e7). In this case, the value of\n             * 'from' variable will be a rank or file, not a square.\n             */\n            matches = cleanMove.match(/([pnbrqkPNBRQK])?([a-h]?[1-8]?)x?-?([a-h][1-8])([qrbnQRBN])?/);\n            if (matches) {\n                piece = matches[1];\n                from = matches[2];\n                to = matches[3];\n                promotion = matches[4];\n                if (from.length == 1) {\n                    overlyDisambiguated = true;\n                }\n            }\n        }\n        pieceType = inferPieceType(cleanMove);\n        moves = this._moves({\n            legal: true,\n            piece: piece ? piece : pieceType,\n        });\n        if (!to) {\n            return null;\n        }\n        for (let i = 0, len = moves.length; i < len; i++) {\n            if (!from) {\n                // if there is no from square, it could be just 'x' missing from a capture\n                if (cleanMove ===\n                    strippedSan(this._moveToSan(moves[i], moves)).replace('x', '')) {\n                    return moves[i];\n                }\n                // hand-compare move properties with the results from our permissive regex\n            }\n            else if ((!piece || piece.toLowerCase() == moves[i].piece) &&\n                Ox88[from] == moves[i].from &&\n                Ox88[to] == moves[i].to &&\n                (!promotion || promotion.toLowerCase() == moves[i].promotion)) {\n                return moves[i];\n            }\n            else if (overlyDisambiguated) {\n                /*\n                 * SPECIAL CASE: we parsed a move string that may have an unneeded\n                 * rank/file disambiguator (e.g. Nge7).  The 'from' variable will\n                 */\n                const square = algebraic(moves[i].from);\n                if ((!piece || piece.toLowerCase() == moves[i].piece) &&\n                    Ox88[to] == moves[i].to &&\n                    (from == square[0] || from == square[1]) &&\n                    (!promotion || promotion.toLowerCase() == moves[i].promotion)) {\n                    return moves[i];\n                }\n            }\n        }\n        return null;\n    }\n    ascii() {\n        let s = '   +------------------------+\\n';\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n            // display the rank\n            if (file(i) === 0) {\n                s += ' ' + '87654321'[rank(i)] + ' |';\n            }\n            if (this._board[i]) {\n                const piece = this._board[i].type;\n                const color = this._board[i].color;\n                const symbol = color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n                s += ' ' + symbol + ' ';\n            }\n            else {\n                s += ' . ';\n            }\n            if ((i + 1) & 0x88) {\n                s += '|\\n';\n                i += 8;\n            }\n        }\n        s += '   +------------------------+\\n';\n        s += '     a  b  c  d  e  f  g  h';\n        return s;\n    }\n    perft(depth) {\n        const moves = this._moves({ legal: false });\n        let nodes = 0;\n        const color = this._turn;\n        for (let i = 0, len = moves.length; i < len; i++) {\n            this._makeMove(moves[i]);\n            if (!this._isKingAttacked(color)) {\n                if (depth - 1 > 0) {\n                    nodes += this.perft(depth - 1);\n                }\n                else {\n                    nodes++;\n                }\n            }\n            this._undoMove();\n        }\n        return nodes;\n    }\n    turn() {\n        return this._turn;\n    }\n    board() {\n        const output = [];\n        let row = [];\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n            if (this._board[i] == null) {\n                row.push(null);\n            }\n            else {\n                row.push({\n                    square: algebraic(i),\n                    type: this._board[i].type,\n                    color: this._board[i].color,\n                });\n            }\n            if ((i + 1) & 0x88) {\n                output.push(row);\n                row = [];\n                i += 8;\n            }\n        }\n        return output;\n    }\n    squareColor(square) {\n        if (square in Ox88) {\n            const sq = Ox88[square];\n            return (rank(sq) + file(sq)) % 2 === 0 ? 'light' : 'dark';\n        }\n        return null;\n    }\n    history({ verbose = false } = {}) {\n        const reversedHistory = [];\n        const moveHistory = [];\n        while (this._history.length > 0) {\n            reversedHistory.push(this._undoMove());\n        }\n        while (true) {\n            const move = reversedHistory.pop();\n            if (!move) {\n                break;\n            }\n            if (verbose) {\n                moveHistory.push(new Move(this, move));\n            }\n            else {\n                moveHistory.push(this._moveToSan(move, this._moves()));\n            }\n            this._makeMove(move);\n        }\n        return moveHistory;\n    }\n    /*\n     * Keeps track of position occurrence counts for the purpose of repetition\n     * checking. All three methods (`_inc`, `_dec`, and `_get`) trim the\n     * irrelevent information from the fen, initialising new positions, and\n     * removing old positions from the record if their counts are reduced to 0.\n     */\n    _getPositionCount(fen) {\n        const trimmedFen = trimFen(fen);\n        return this._positionCount[trimmedFen] || 0;\n    }\n    _incPositionCount(fen) {\n        const trimmedFen = trimFen(fen);\n        if (this._positionCount[trimmedFen] === undefined) {\n            this._positionCount[trimmedFen] = 0;\n        }\n        this._positionCount[trimmedFen] += 1;\n    }\n    _decPositionCount(fen) {\n        const trimmedFen = trimFen(fen);\n        if (this._positionCount[trimmedFen] === 1) {\n            delete this._positionCount[trimmedFen];\n        }\n        else {\n            this._positionCount[trimmedFen] -= 1;\n        }\n    }\n    _pruneComments() {\n        const reversedHistory = [];\n        const currentComments = {};\n        const copyComment = (fen) => {\n            if (fen in this._comments) {\n                currentComments[fen] = this._comments[fen];\n            }\n        };\n        while (this._history.length > 0) {\n            reversedHistory.push(this._undoMove());\n        }\n        copyComment(this.fen());\n        while (true) {\n            const move = reversedHistory.pop();\n            if (!move) {\n                break;\n            }\n            this._makeMove(move);\n            copyComment(this.fen());\n        }\n        this._comments = currentComments;\n    }\n    getComment() {\n        return this._comments[this.fen()];\n    }\n    setComment(comment) {\n        this._comments[this.fen()] = comment.replace('{', '[').replace('}', ']');\n    }\n    /**\n     * @deprecated Renamed to `removeComment` for consistency\n     */\n    deleteComment() {\n        return this.removeComment();\n    }\n    removeComment() {\n        const comment = this._comments[this.fen()];\n        delete this._comments[this.fen()];\n        return comment;\n    }\n    getComments() {\n        this._pruneComments();\n        return Object.keys(this._comments).map((fen) => {\n            return { fen: fen, comment: this._comments[fen] };\n        });\n    }\n    /**\n     * @deprecated Renamed to `removeComments` for consistency\n     */\n    deleteComments() {\n        return this.removeComments();\n    }\n    removeComments() {\n        this._pruneComments();\n        return Object.keys(this._comments).map((fen) => {\n            const comment = this._comments[fen];\n            delete this._comments[fen];\n            return { fen: fen, comment: comment };\n        });\n    }\n    setCastlingRights(color, rights) {\n        for (const side of [KING, QUEEN]) {\n            if (rights[side] !== undefined) {\n                if (rights[side]) {\n                    this._castling[color] |= SIDES[side];\n                }\n                else {\n                    this._castling[color] &= ~SIDES[side];\n                }\n            }\n        }\n        this._updateCastlingRights();\n        const result = this.getCastlingRights(color);\n        return ((rights[KING] === undefined || rights[KING] === result[KING]) &&\n            (rights[QUEEN] === undefined || rights[QUEEN] === result[QUEEN]));\n    }\n    getCastlingRights(color) {\n        return {\n            [KING]: (this._castling[color] & SIDES[KING]) !== 0,\n            [QUEEN]: (this._castling[color] & SIDES[QUEEN]) !== 0,\n        };\n    }\n    moveNumber() {\n        return this._moveNumber;\n    }\n}\n//# sourceMappingURL=chess.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/chess.js/dist/esm/chess.js\n"));

/***/ }),

/***/ "./src/components/EscrowPanel.tsx":
/*!****************************************!*\
  !*** ./src/components/EscrowPanel.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _contracts_EscrowContractAdapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../contracts/EscrowContractAdapter */ \"./src/contracts/EscrowContractAdapter.ts\");\n\n\n\nconst EscrowPanel = (param)=>{\n    let { escrowAddress, escrowStatus, escrowBalance, useSimulationMode, setUseSimulationMode, onConnectEscrowWallet, onDisconnectEscrow, onCreateSimulatedEscrow, onInitializeEscrow, onResetGame, onResetWallets } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"mt-8 p-4 bg-gray-200 rounded\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                className: \"text-lg font-bold mb-2\",\n                children: \"Contract Status\"\n            }, void 0, false, {\n                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                lineNumber: 34,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"grid grid-cols-1 md:grid-cols-2 gap-4\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                        children: \"Escrow Address:\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                        lineNumber: 37,\n                                        columnNumber: 14\n                                    }, undefined),\n                                    \" \",\n                                    escrowAddress || \"Not connected\"\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                lineNumber: 37,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                        children: \"Status:\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                        lineNumber: 38,\n                                        columnNumber: 14\n                                    }, undefined),\n                                    \" \",\n                                    _contracts_EscrowContractAdapter__WEBPACK_IMPORTED_MODULE_2__.EscrowStatus[escrowStatus]\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                lineNumber: 38,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                        children: \"Escrow Balance:\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                        lineNumber: 39,\n                                        columnNumber: 14\n                                    }, undefined),\n                                    \" \",\n                                    escrowBalance,\n                                    \" APT\"\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                lineNumber: 39,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"mt-4 p-4 bg-indigo-50 border border-indigo-200 rounded\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h4\", {\n                                        className: \"font-bold text-indigo-800\",\n                                        children: \"Escrow Wallet\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                        lineNumber: 43,\n                                        columnNumber: 13\n                                    }, undefined),\n                                    escrowAddress ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"mt-2\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                className: \"text-indigo-700\",\n                                                children: \"Escrow wallet connected:\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                                lineNumber: 46,\n                                                columnNumber: 17\n                                            }, undefined),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                className: \"font-mono text-sm mt-1\",\n                                                children: escrowAddress\n                                            }, void 0, false, {\n                                                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                                lineNumber: 47,\n                                                columnNumber: 17\n                                            }, undefined),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                className: \"mt-2 bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm\",\n                                                onClick: onDisconnectEscrow,\n                                                children: \"Disconnect Escrow\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                                lineNumber: 48,\n                                                columnNumber: 17\n                                            }, undefined)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                        lineNumber: 45,\n                                        columnNumber: 15\n                                    }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"mt-2\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                className: \"text-indigo-700 mb-2\",\n                                                children: \"Connect your escrow wallet:\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                                lineNumber: 57,\n                                                columnNumber: 17\n                                            }, undefined),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                className: \"bg-indigo-600 hover:bg-indigo-700 text-white px-3 py-2 rounded w-full\",\n                                                onClick: onConnectEscrowWallet,\n                                                disabled: useSimulationMode,\n                                                children: \"Connect Escrow Wallet\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                                lineNumber: 58,\n                                                columnNumber: 17\n                                            }, undefined),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                className: \"text-xs text-indigo-600 mt-1\",\n                                                children: \"The escrow wallet will hold funds during the game and distribute to the winner.\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                                lineNumber: 65,\n                                                columnNumber: 17\n                                            }, undefined)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                        lineNumber: 56,\n                                        columnNumber: 15\n                                    }, undefined)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                lineNumber: 42,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"mt-4 p-2 bg-blue-50 border border-blue-200 rounded\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                        className: \"text-blue-800 font-medium\",\n                                        children: \"3-Wallet Setup Instructions:\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                        lineNumber: 74,\n                                        columnNumber: 13\n                                    }, undefined),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ol\", {\n                                        className: \"list-decimal list-inside text-blue-700 pl-2 text-sm space-y-1 mt-1\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                                children: \"Connect Player 1 wallet first\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                                lineNumber: 76,\n                                                columnNumber: 15\n                                            }, undefined),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                                children: \"Connect Player 2 wallet second (make sure to switch to a different wallet in Petra)\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                                lineNumber: 77,\n                                                columnNumber: 15\n                                            }, undefined),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                                children: \"Connect the Escrow wallet third (should be a separate wallet from both players)\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                                lineNumber: 78,\n                                                columnNumber: 15\n                                            }, undefined),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                                children: \"Place bets and lock escrow to start the game\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                                lineNumber: 79,\n                                                columnNumber: 15\n                                            }, undefined),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                                children: \"After game completes, the escrow wallet will pay the winner\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                                lineNumber: 80,\n                                                columnNumber: 15\n                                            }, undefined)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                        lineNumber: 75,\n                                        columnNumber: 13\n                                    }, undefined)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                lineNumber: 73,\n                                columnNumber: 11\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                        lineNumber: 36,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex items-center\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                        type: \"checkbox\",\n                                        id: \"simulationMode\",\n                                        checked: useSimulationMode,\n                                        onChange: (e)=>setUseSimulationMode(e.target.checked),\n                                        className: \"mr-2\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                        lineNumber: 86,\n                                        columnNumber: 13\n                                    }, undefined),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                        htmlFor: \"simulationMode\",\n                                        children: \"Simulation Mode (No real transactions)\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                        lineNumber: 93,\n                                        columnNumber: 13\n                                    }, undefined)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                lineNumber: 85,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                className: \"text-sm text-gray-600 mt-1\",\n                                children: \"Enable simulation mode to test the game flow without actual blockchain transactions.\"\n                            }, void 0, false, {\n                                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                lineNumber: 95,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"mt-4 grid grid-cols-2 gap-2\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        className: \"bg-blue-500 hover:bg-blue-600 text-white px-3 py-2 rounded\",\n                                        onClick: onInitializeEscrow,\n                                        disabled: useSimulationMode,\n                                        children: \"Initialize Escrow\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                        lineNumber: 99,\n                                        columnNumber: 13\n                                    }, undefined),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        className: \"bg-green-500 hover:bg-green-600 text-white px-3 py-2 rounded\",\n                                        onClick: onCreateSimulatedEscrow,\n                                        disabled: !useSimulationMode,\n                                        children: \"Create Simulated Escrow\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                        lineNumber: 106,\n                                        columnNumber: 13\n                                    }, undefined),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        className: \"bg-red-500 hover:bg-red-600 text-white px-3 py-2 rounded\",\n                                        onClick: onResetGame,\n                                        children: \"Reset Game\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                        lineNumber: 113,\n                                        columnNumber: 13\n                                    }, undefined),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        className: \"bg-yellow-500 hover:bg-yellow-600 text-white px-3 py-2 rounded\",\n                                        onClick: onResetWallets,\n                                        children: \"Reset All Wallets\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                        lineNumber: 119,\n                                        columnNumber: 13\n                                    }, undefined)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                                lineNumber: 98,\n                                columnNumber: 11\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                        lineNumber: 84,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n                lineNumber: 35,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/EscrowPanel.tsx\",\n        lineNumber: 33,\n        columnNumber: 5\n    }, undefined);\n};\n_c = EscrowPanel;\n/* harmony default export */ __webpack_exports__[\"default\"] = (EscrowPanel);\nvar _c;\n$RefreshReg$(_c, \"EscrowPanel\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9Fc2Nyb3dQYW5lbC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEwQjtBQUN3QztBQWlCbEUsTUFBTUUsY0FBMEM7UUFBQyxFQUMvQ0MsYUFBYSxFQUNiQyxZQUFZLEVBQ1pDLGFBQWEsRUFDYkMsaUJBQWlCLEVBQ2pCQyxvQkFBb0IsRUFDcEJDLHFCQUFxQixFQUNyQkMsa0JBQWtCLEVBQ2xCQyx1QkFBdUIsRUFDdkJDLGtCQUFrQixFQUNsQkMsV0FBVyxFQUNYQyxjQUFjLEVBQ2Y7SUFDQyxxQkFDRSw4REFBQ0M7UUFBSUMsV0FBVTs7MEJBQ2IsOERBQUNDO2dCQUFHRCxXQUFVOzBCQUF5Qjs7Ozs7OzBCQUN2Qyw4REFBQ0Q7Z0JBQUlDLFdBQVU7O2tDQUNiLDhEQUFDRDs7MENBQ0MsOERBQUNHOztrREFBRSw4REFBQ0M7a0RBQU87Ozs7OztvQ0FBd0I7b0NBQUVmLGlCQUFpQjs7Ozs7OzswQ0FDdEQsOERBQUNjOztrREFBRSw4REFBQ0M7a0RBQU87Ozs7OztvQ0FBZ0I7b0NBQUVqQiwwRUFBWSxDQUFDRyxhQUFhOzs7Ozs7OzBDQUN2RCw4REFBQ2E7O2tEQUFFLDhEQUFDQztrREFBTzs7Ozs7O29DQUF3QjtvQ0FBRWI7b0NBQWM7Ozs7Ozs7MENBR25ELDhEQUFDUztnQ0FBSUMsV0FBVTs7a0RBQ2IsOERBQUNJO3dDQUFHSixXQUFVO2tEQUE0Qjs7Ozs7O29DQUN6Q1osOEJBQ0MsOERBQUNXO3dDQUFJQyxXQUFVOzswREFDYiw4REFBQ0U7Z0RBQUVGLFdBQVU7MERBQWtCOzs7Ozs7MERBQy9CLDhEQUFDRTtnREFBRUYsV0FBVTswREFBMEJaOzs7Ozs7MERBQ3ZDLDhEQUFDaUI7Z0RBQ0NMLFdBQVU7Z0RBQ1ZNLFNBQVNaOzBEQUNWOzs7Ozs7Ozs7OztrRUFLSCw4REFBQ0s7d0NBQUlDLFdBQVU7OzBEQUNiLDhEQUFDRTtnREFBRUYsV0FBVTswREFBdUI7Ozs7OzswREFDcEMsOERBQUNLO2dEQUNDTCxXQUFVO2dEQUNWTSxTQUFTYjtnREFDVGMsVUFBVWhCOzBEQUNYOzs7Ozs7MERBR0QsOERBQUNXO2dEQUFFRixXQUFVOzBEQUErQjs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBDQVFsRCw4REFBQ0Q7Z0NBQUlDLFdBQVU7O2tEQUNiLDhEQUFDRTt3Q0FBRUYsV0FBVTtrREFBNEI7Ozs7OztrREFDekMsOERBQUNRO3dDQUFHUixXQUFVOzswREFDWiw4REFBQ1M7MERBQUc7Ozs7OzswREFDSiw4REFBQ0E7MERBQUc7Ozs7OzswREFDSiw4REFBQ0E7MERBQUc7Ozs7OzswREFDSiw4REFBQ0E7MERBQUc7Ozs7OzswREFDSiw4REFBQ0E7MERBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQ0FJViw4REFBQ1Y7OzBDQUNDLDhEQUFDQTtnQ0FBSUMsV0FBVTs7a0RBQ2IsOERBQUNVO3dDQUNDQyxNQUFLO3dDQUNMQyxJQUFHO3dDQUNIQyxTQUFTdEI7d0NBQ1R1QixVQUFVLENBQUNDLElBQU12QixxQkFBcUJ1QixFQUFFQyxNQUFNLENBQUNILE9BQU87d0NBQ3REYixXQUFVOzs7Ozs7a0RBRVosOERBQUNpQjt3Q0FBTUMsU0FBUTtrREFBaUI7Ozs7Ozs7Ozs7OzswQ0FFbEMsOERBQUNoQjtnQ0FBRUYsV0FBVTswQ0FBNkI7Ozs7OzswQ0FHMUMsOERBQUNEO2dDQUFJQyxXQUFVOztrREFDYiw4REFBQ0s7d0NBQ0NMLFdBQVU7d0NBQ1ZNLFNBQVNWO3dDQUNUVyxVQUFVaEI7a0RBQ1g7Ozs7OztrREFHRCw4REFBQ2M7d0NBQ0NMLFdBQVU7d0NBQ1ZNLFNBQVNYO3dDQUNUWSxVQUFVLENBQUNoQjtrREFDWjs7Ozs7O2tEQUdELDhEQUFDYzt3Q0FDQ0wsV0FBVTt3Q0FDVk0sU0FBU1Q7a0RBQ1Y7Ozs7OztrREFHRCw4REFBQ1E7d0NBQ0NMLFdBQVU7d0NBQ1ZNLFNBQVNSO2tEQUNWOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFRYjtLQS9HTVg7QUFpSE4sK0RBQWVBLFdBQVdBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvRXNjcm93UGFuZWwudHN4P2U4NTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEVzY3Jvd1N0YXR1cyB9IGZyb20gJy4uL2NvbnRyYWN0cy9Fc2Nyb3dDb250cmFjdEFkYXB0ZXInO1xuaW1wb3J0IHsgZm9ybWF0V2FsbGV0QWRkcmVzcyB9IGZyb20gJy4uL3V0aWxzL3RyYW5zYWN0aW9ucyc7XG5cbmludGVyZmFjZSBFc2Nyb3dQYW5lbFByb3BzIHtcbiAgZXNjcm93QWRkcmVzczogc3RyaW5nIHwgbnVsbDtcbiAgZXNjcm93U3RhdHVzOiBFc2Nyb3dTdGF0dXM7XG4gIGVzY3Jvd0JhbGFuY2U6IG51bWJlcjtcbiAgdXNlU2ltdWxhdGlvbk1vZGU6IGJvb2xlYW47XG4gIHNldFVzZVNpbXVsYXRpb25Nb2RlOiAobW9kZTogYm9vbGVhbikgPT4gdm9pZDtcbiAgb25Db25uZWN0RXNjcm93V2FsbGV0OiAoKSA9PiB2b2lkO1xuICBvbkRpc2Nvbm5lY3RFc2Nyb3c6ICgpID0+IHZvaWQ7XG4gIG9uQ3JlYXRlU2ltdWxhdGVkRXNjcm93OiAoKSA9PiB2b2lkO1xuICBvbkluaXRpYWxpemVFc2Nyb3c6ICgpID0+IHZvaWQ7XG4gIG9uUmVzZXRHYW1lOiAoKSA9PiB2b2lkO1xuICBvblJlc2V0V2FsbGV0czogKCkgPT4gdm9pZDtcbn1cblxuY29uc3QgRXNjcm93UGFuZWw6IFJlYWN0LkZDPEVzY3Jvd1BhbmVsUHJvcHM+ID0gKHtcbiAgZXNjcm93QWRkcmVzcyxcbiAgZXNjcm93U3RhdHVzLFxuICBlc2Nyb3dCYWxhbmNlLFxuICB1c2VTaW11bGF0aW9uTW9kZSxcbiAgc2V0VXNlU2ltdWxhdGlvbk1vZGUsXG4gIG9uQ29ubmVjdEVzY3Jvd1dhbGxldCxcbiAgb25EaXNjb25uZWN0RXNjcm93LFxuICBvbkNyZWF0ZVNpbXVsYXRlZEVzY3JvdyxcbiAgb25Jbml0aWFsaXplRXNjcm93LFxuICBvblJlc2V0R2FtZSxcbiAgb25SZXNldFdhbGxldHNcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LTggcC00IGJnLWdyYXktMjAwIHJvdW5kZWRcIj5cbiAgICAgIDxoMyBjbGFzc05hbWU9XCJ0ZXh0LWxnIGZvbnQtYm9sZCBtYi0yXCI+Q29udHJhY3QgU3RhdHVzPC9oMz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZCBncmlkLWNvbHMtMSBtZDpncmlkLWNvbHMtMiBnYXAtNFwiPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxwPjxzdHJvbmc+RXNjcm93IEFkZHJlc3M6PC9zdHJvbmc+IHtlc2Nyb3dBZGRyZXNzIHx8ICdOb3QgY29ubmVjdGVkJ308L3A+XG4gICAgICAgICAgPHA+PHN0cm9uZz5TdGF0dXM6PC9zdHJvbmc+IHtFc2Nyb3dTdGF0dXNbZXNjcm93U3RhdHVzXX08L3A+XG4gICAgICAgICAgPHA+PHN0cm9uZz5Fc2Nyb3cgQmFsYW5jZTo8L3N0cm9uZz4ge2VzY3Jvd0JhbGFuY2V9IEFQVDwvcD5cbiAgICAgICAgICBcbiAgICAgICAgICB7LyogRXNjcm93IHdhbGxldCBjb25uZWN0aW9uIHBhbmVsICovfVxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXQtNCBwLTQgYmctaW5kaWdvLTUwIGJvcmRlciBib3JkZXItaW5kaWdvLTIwMCByb3VuZGVkXCI+XG4gICAgICAgICAgICA8aDQgY2xhc3NOYW1lPVwiZm9udC1ib2xkIHRleHQtaW5kaWdvLTgwMFwiPkVzY3JvdyBXYWxsZXQ8L2g0PlxuICAgICAgICAgICAge2VzY3Jvd0FkZHJlc3MgPyAoXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXQtMlwiPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtaW5kaWdvLTcwMFwiPkVzY3JvdyB3YWxsZXQgY29ubmVjdGVkOjwvcD5cbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJmb250LW1vbm8gdGV4dC1zbSBtdC0xXCI+e2VzY3Jvd0FkZHJlc3N9PC9wPlxuICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm10LTIgYmctcmVkLTUwMCBob3ZlcjpiZy1yZWQtNjAwIHRleHQtd2hpdGUgcHgtMyBweS0xIHJvdW5kZWQgdGV4dC1zbVwiXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXtvbkRpc2Nvbm5lY3RFc2Nyb3d9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgRGlzY29ubmVjdCBFc2Nyb3dcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LTJcIj5cbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LWluZGlnby03MDAgbWItMlwiPkNvbm5lY3QgeW91ciBlc2Nyb3cgd2FsbGV0OjwvcD5cbiAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJiZy1pbmRpZ28tNjAwIGhvdmVyOmJnLWluZGlnby03MDAgdGV4dC13aGl0ZSBweC0zIHB5LTIgcm91bmRlZCB3LWZ1bGxcIlxuICAgICAgICAgICAgICAgICAgb25DbGljaz17b25Db25uZWN0RXNjcm93V2FsbGV0fVxuICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e3VzZVNpbXVsYXRpb25Nb2RlfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIENvbm5lY3QgRXNjcm93IFdhbGxldFxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQteHMgdGV4dC1pbmRpZ28tNjAwIG10LTFcIj5cbiAgICAgICAgICAgICAgICAgIFRoZSBlc2Nyb3cgd2FsbGV0IHdpbGwgaG9sZCBmdW5kcyBkdXJpbmcgdGhlIGdhbWUgYW5kIGRpc3RyaWJ1dGUgdG8gdGhlIHdpbm5lci5cbiAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICBcbiAgICAgICAgICB7LyogV2FsbGV0IENvbm5lY3Rpb24gVGlwcyAqL31cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LTQgcC0yIGJnLWJsdWUtNTAgYm9yZGVyIGJvcmRlci1ibHVlLTIwMCByb3VuZGVkXCI+XG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LWJsdWUtODAwIGZvbnQtbWVkaXVtXCI+My1XYWxsZXQgU2V0dXAgSW5zdHJ1Y3Rpb25zOjwvcD5cbiAgICAgICAgICAgIDxvbCBjbGFzc05hbWU9XCJsaXN0LWRlY2ltYWwgbGlzdC1pbnNpZGUgdGV4dC1ibHVlLTcwMCBwbC0yIHRleHQtc20gc3BhY2UteS0xIG10LTFcIj5cbiAgICAgICAgICAgICAgPGxpPkNvbm5lY3QgUGxheWVyIDEgd2FsbGV0IGZpcnN0PC9saT5cbiAgICAgICAgICAgICAgPGxpPkNvbm5lY3QgUGxheWVyIDIgd2FsbGV0IHNlY29uZCAobWFrZSBzdXJlIHRvIHN3aXRjaCB0byBhIGRpZmZlcmVudCB3YWxsZXQgaW4gUGV0cmEpPC9saT5cbiAgICAgICAgICAgICAgPGxpPkNvbm5lY3QgdGhlIEVzY3JvdyB3YWxsZXQgdGhpcmQgKHNob3VsZCBiZSBhIHNlcGFyYXRlIHdhbGxldCBmcm9tIGJvdGggcGxheWVycyk8L2xpPlxuICAgICAgICAgICAgICA8bGk+UGxhY2UgYmV0cyBhbmQgbG9jayBlc2Nyb3cgdG8gc3RhcnQgdGhlIGdhbWU8L2xpPlxuICAgICAgICAgICAgICA8bGk+QWZ0ZXIgZ2FtZSBjb21wbGV0ZXMsIHRoZSBlc2Nyb3cgd2FsbGV0IHdpbGwgcGF5IHRoZSB3aW5uZXI8L2xpPlxuICAgICAgICAgICAgPC9vbD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlclwiPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICAgIGlkPVwic2ltdWxhdGlvbk1vZGVcIlxuICAgICAgICAgICAgICBjaGVja2VkPXt1c2VTaW11bGF0aW9uTW9kZX1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRVc2VTaW11bGF0aW9uTW9kZShlLnRhcmdldC5jaGVja2VkKX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXItMlwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJzaW11bGF0aW9uTW9kZVwiPlNpbXVsYXRpb24gTW9kZSAoTm8gcmVhbCB0cmFuc2FjdGlvbnMpPC9sYWJlbD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNtIHRleHQtZ3JheS02MDAgbXQtMVwiPlxuICAgICAgICAgICAgRW5hYmxlIHNpbXVsYXRpb24gbW9kZSB0byB0ZXN0IHRoZSBnYW1lIGZsb3cgd2l0aG91dCBhY3R1YWwgYmxvY2tjaGFpbiB0cmFuc2FjdGlvbnMuXG4gICAgICAgICAgPC9wPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXQtNCBncmlkIGdyaWQtY29scy0yIGdhcC0yXCI+XG4gICAgICAgICAgICA8YnV0dG9uIFxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJiZy1ibHVlLTUwMCBob3ZlcjpiZy1ibHVlLTYwMCB0ZXh0LXdoaXRlIHB4LTMgcHktMiByb3VuZGVkXCJcbiAgICAgICAgICAgICAgb25DbGljaz17b25Jbml0aWFsaXplRXNjcm93fVxuICAgICAgICAgICAgICBkaXNhYmxlZD17dXNlU2ltdWxhdGlvbk1vZGV9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIEluaXRpYWxpemUgRXNjcm93XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYmctZ3JlZW4tNTAwIGhvdmVyOmJnLWdyZWVuLTYwMCB0ZXh0LXdoaXRlIHB4LTMgcHktMiByb3VuZGVkXCJcbiAgICAgICAgICAgICAgb25DbGljaz17b25DcmVhdGVTaW11bGF0ZWRFc2Nyb3d9XG4gICAgICAgICAgICAgIGRpc2FibGVkPXshdXNlU2ltdWxhdGlvbk1vZGV9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIENyZWF0ZSBTaW11bGF0ZWQgRXNjcm93XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYmctcmVkLTUwMCBob3ZlcjpiZy1yZWQtNjAwIHRleHQtd2hpdGUgcHgtMyBweS0yIHJvdW5kZWRcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXtvblJlc2V0R2FtZX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgUmVzZXQgR2FtZVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJnLXllbGxvdy01MDAgaG92ZXI6YmcteWVsbG93LTYwMCB0ZXh0LXdoaXRlIHB4LTMgcHktMiByb3VuZGVkXCJcbiAgICAgICAgICAgICAgb25DbGljaz17b25SZXNldFdhbGxldHN9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIFJlc2V0IEFsbCBXYWxsZXRzXG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEVzY3Jvd1BhbmVsOyAiXSwibmFtZXMiOlsiUmVhY3QiLCJFc2Nyb3dTdGF0dXMiLCJFc2Nyb3dQYW5lbCIsImVzY3Jvd0FkZHJlc3MiLCJlc2Nyb3dTdGF0dXMiLCJlc2Nyb3dCYWxhbmNlIiwidXNlU2ltdWxhdGlvbk1vZGUiLCJzZXRVc2VTaW11bGF0aW9uTW9kZSIsIm9uQ29ubmVjdEVzY3Jvd1dhbGxldCIsIm9uRGlzY29ubmVjdEVzY3JvdyIsIm9uQ3JlYXRlU2ltdWxhdGVkRXNjcm93Iiwib25Jbml0aWFsaXplRXNjcm93Iiwib25SZXNldEdhbWUiLCJvblJlc2V0V2FsbGV0cyIsImRpdiIsImNsYXNzTmFtZSIsImgzIiwicCIsInN0cm9uZyIsImg0IiwiYnV0dG9uIiwib25DbGljayIsImRpc2FibGVkIiwib2wiLCJsaSIsImlucHV0IiwidHlwZSIsImlkIiwiY2hlY2tlZCIsIm9uQ2hhbmdlIiwiZSIsInRhcmdldCIsImxhYmVsIiwiaHRtbEZvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/EscrowPanel.tsx\n"));

/***/ }),

/***/ "./src/components/LoadingComponent.tsx":
/*!*********************************************!*\
  !*** ./src/components/LoadingComponent.tsx ***!
  \*********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst LoadingComponent = (param)=>{\n    let { message = \"Loading...\" } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex flex-col items-center justify-center p-6\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mb-4\"\n            }, void 0, false, {\n                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/LoadingComponent.tsx\",\n                lineNumber: 12,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                className: \"text-gray-700\",\n                children: message\n            }, void 0, false, {\n                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/LoadingComponent.tsx\",\n                lineNumber: 13,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/components/LoadingComponent.tsx\",\n        lineNumber: 11,\n        columnNumber: 5\n    }, undefined);\n};\n_c = LoadingComponent;\n/* harmony default export */ __webpack_exports__[\"default\"] = (LoadingComponent);\nvar _c;\n$RefreshReg$(_c, \"LoadingComponent\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9Mb2FkaW5nQ29tcG9uZW50LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMEI7QUFNMUIsTUFBTUMsbUJBQW9EO1FBQUMsRUFDekRDLFVBQVUsWUFBWSxFQUN2QjtJQUNDLHFCQUNFLDhEQUFDQztRQUFJQyxXQUFVOzswQkFDYiw4REFBQ0Q7Z0JBQUlDLFdBQVU7Ozs7OzswQkFDZiw4REFBQ0M7Z0JBQUVELFdBQVU7MEJBQWlCRjs7Ozs7Ozs7Ozs7O0FBR3BDO0tBVE1EO0FBV04sK0RBQWVBLGdCQUFnQkEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29tcG9uZW50cy9Mb2FkaW5nQ29tcG9uZW50LnRzeD80YzliIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmludGVyZmFjZSBMb2FkaW5nQ29tcG9uZW50UHJvcHMge1xuICBtZXNzYWdlPzogc3RyaW5nO1xufVxuXG5jb25zdCBMb2FkaW5nQ29tcG9uZW50OiBSZWFjdC5GQzxMb2FkaW5nQ29tcG9uZW50UHJvcHM+ID0gKHsgXG4gIG1lc3NhZ2UgPSAnTG9hZGluZy4uLidcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHAtNlwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbmltYXRlLXNwaW4gcm91bmRlZC1mdWxsIGgtMTIgdy0xMiBib3JkZXItYi0yIGJvcmRlci1wcmltYXJ5IG1iLTRcIj48L2Rpdj5cbiAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtZ3JheS03MDBcIj57bWVzc2FnZX08L3A+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2FkaW5nQ29tcG9uZW50OyAiXSwibmFtZXMiOlsiUmVhY3QiLCJMb2FkaW5nQ29tcG9uZW50IiwibWVzc2FnZSIsImRpdiIsImNsYXNzTmFtZSIsInAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/LoadingComponent.tsx\n"));

/***/ }),

/***/ "./src/contracts/EscrowContractAdapter.ts":
/*!************************************************!*\
  !*** ./src/contracts/EscrowContractAdapter.ts ***!
  \************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DisputeResolution: function() { return /* binding */ DisputeResolution; },\n/* harmony export */   EscrowContractAdapter: function() { return /* binding */ EscrowContractAdapter; },\n/* harmony export */   EscrowStatus: function() { return /* binding */ EscrowStatus; }\n/* harmony export */ });\n/* harmony import */ var aptos__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aptos */ \"./node_modules/aptos/dist/index.mjs\");\n\nvar EscrowStatus;\n(function(EscrowStatus) {\n    EscrowStatus[EscrowStatus[\"PENDING\"] = 0] = \"PENDING\";\n    EscrowStatus[EscrowStatus[\"FUNDED\"] = 1] = \"FUNDED\";\n    EscrowStatus[EscrowStatus[\"PLAYING\"] = 2] = \"PLAYING\";\n    EscrowStatus[EscrowStatus[\"COMPLETED\"] = 3] = \"COMPLETED\";\n    EscrowStatus[EscrowStatus[\"DISPUTED\"] = 4] = \"DISPUTED\";\n    EscrowStatus[EscrowStatus[\"CANCELLED\"] = 5] = \"CANCELLED\";\n    EscrowStatus[EscrowStatus[\"TIMED_OUT\"] = 6] = \"TIMED_OUT\";\n})(EscrowStatus || (EscrowStatus = {}));\n// Class to interface with the chess escrow contract on Aptos\nclass EscrowContractAdapter {\n    // Set the escrow contract address\n    setEscrowAddress(address) {\n        console.log(\"Setting escrow address to: \".concat(address));\n        this.escrowAddress = address;\n    }\n    // Get the escrow address\n    getEscrowAddress() {\n        return this.escrowAddress;\n    }\n    // Initialize a new escrow contract using any wallet\n    async initializeEscrow(sender, player1Address, player2Address, minimumBet) {\n        let timeoutSeconds = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 24 * 60 * 60;\n        try {\n            // Convert APT to octas (smallest unit) - 1 APT = 10^8 Octas\n            const minimumBetOctas = (minimumBet * 100000000).toString();\n            // Get the wallet address to set as escrow (could be a completely new wallet)\n            let walletAddress;\n            // Try different wallet API styles to get the address\n            if (sender.account) {\n                // Standard Petra wallet\n                const response = await sender.account();\n                walletAddress = response.address;\n            } else if ( true && window.aptos) {\n                // window.aptos API\n                const response = await window.aptos.connect();\n                walletAddress = response.address;\n            } else {\n                throw new Error(\"Could not determine wallet address\");\n            }\n            console.log(\"Using wallet as escrow: \".concat(walletAddress));\n            // Use the moduleAddress as the arbiter for simplicity\n            const arbiterAddress = this.moduleAddress;\n            const payload = {\n                type: \"entry_function_payload\",\n                function: \"\".concat(this.moduleAddress, \"::chess_escrow::create_escrow\"),\n                type_arguments: [],\n                arguments: [\n                    player1Address,\n                    player2Address,\n                    minimumBetOctas,\n                    arbiterAddress,\n                    timeoutSeconds.toString()\n                ]\n            };\n            console.log(\"Initializing escrow with payload:\", JSON.stringify(payload, null, 2));\n            const txResponse = await this.submitTransaction(sender, payload);\n            if (txResponse && txResponse.hash) {\n                // Set the escrow address to the wallet address that initialized it\n                this.escrowAddress = walletAddress;\n                console.log(\"Escrow initialized with address: \".concat(walletAddress));\n                console.log(\"Transaction hash: \".concat(txResponse.hash));\n                return walletAddress;\n            }\n            return null;\n        } catch (error) {\n            console.error(\"Error initializing escrow:\", error);\n            throw error;\n        }\n    }\n    // Deposit funds into the escrow\n    async deposit(sender, amount) {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            // Convert APT to octas\n            const amountInOctas = (amount * 100000000).toString();\n            const payload = {\n                type: \"entry_function_payload\",\n                function: \"\".concat(this.moduleAddress, \"::escrow::deposit\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress,\n                    amountInOctas\n                ]\n            };\n            const response = await this.submitTransaction(sender, payload);\n            return !!response && !!response.hash;\n        } catch (error) {\n            console.error(\"Error depositing to escrow:\", error);\n            throw error;\n        }\n    }\n    // Sign to start the game\n    async signToStartGame(sender) {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const payload = {\n                type: \"entry_function_payload\",\n                function: \"\".concat(this.moduleAddress, \"::escrow::sign_to_start_game\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress\n                ]\n            };\n            const response = await this.submitTransaction(sender, payload);\n            return !!response && !!response.hash;\n        } catch (error) {\n            console.error(\"Error signing to start game:\", error);\n            throw error;\n        }\n    }\n    // Complete the game with a winner - includes automatic fund release\n    async completeGame(sender, winnerAddress) {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        console.log(\"Completing game with winner: \".concat(winnerAddress));\n        console.log(\"Using escrow address: \".concat(this.escrowAddress));\n        try {\n            // Verify wallet connection\n            if ( true && window.aptos) {\n                const walletInfo = await window.aptos.connect();\n                console.log(\"Connected wallet for transaction: \".concat(walletInfo.address));\n            }\n            const payload = {\n                type: \"entry_function_payload\",\n                function: \"\".concat(this.moduleAddress, \"::escrow::complete_game\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress,\n                    winnerAddress\n                ]\n            };\n            const response = await this.submitTransaction(sender, payload);\n            // Automatically release funds without requiring approval\n            if (response && response.hash) {\n                console.log(\"Game completed, funds will be automatically transferred to the winner\");\n                console.log(\"Transaction hash:\", response.hash);\n                // Wait for the transaction to be confirmed before releasing funds\n                await this.client.waitForTransactionWithResult(response.hash);\n                try {\n                    await this.releaseFunds(sender);\n                } catch (error) {\n                    console.error(\"Error releasing funds automatically, may need manual release:\", error);\n                }\n            }\n            return !!response && !!response.hash;\n        } catch (error) {\n            console.error(\"Error completing game:\", error);\n            throw error;\n        }\n    }\n    // Complete the game as a draw - includes automatic fund release\n    async completeGameAsDraw(sender) {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        console.log(\"Completing game as draw\");\n        console.log(\"Using escrow address: \".concat(this.escrowAddress));\n        try {\n            // Verify wallet connection\n            if ( true && window.aptos) {\n                const walletInfo = await window.aptos.connect();\n                console.log(\"Connected wallet for transaction: \".concat(walletInfo.address));\n            }\n            const payload = {\n                type: \"entry_function_payload\",\n                function: \"\".concat(this.moduleAddress, \"::escrow::complete_game_as_draw\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress\n                ]\n            };\n            const response = await this.submitTransaction(sender, payload);\n            // Automatically release funds without requiring approval\n            if (response && response.hash) {\n                console.log(\"Game completed as draw, funds will be automatically returned to players\");\n                console.log(\"Transaction hash:\", response.hash);\n                // Wait for the transaction to be confirmed before releasing funds\n                await this.client.waitForTransactionWithResult(response.hash);\n                try {\n                    await this.releaseFunds(sender);\n                } catch (error) {\n                    console.error(\"Error releasing funds automatically, may need manual release:\", error);\n                }\n            }\n            return !!response && !!response.hash;\n        } catch (error) {\n            console.error(\"Error completing game as draw:\", error);\n            throw error;\n        }\n    }\n    // Release funds to the winner or back to players in case of a draw\n    async releaseFunds(sender) {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const payload = {\n                type: \"entry_function_payload\",\n                function: \"\".concat(this.moduleAddress, \"::escrow::release_funds\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress\n                ]\n            };\n            // This transaction doesn't require approval - it's automated\n            const response = await this.submitTransaction(sender, payload);\n            console.log(\"Funds released to the appropriate recipient(s)\");\n            return !!response && !!response.hash;\n        } catch (error) {\n            console.error(\"Error releasing funds:\", error);\n            throw error;\n        }\n    }\n    // Raise a dispute\n    async raiseDispute(sender, reason) {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const payload = {\n                type: \"entry_function_payload\",\n                function: \"\".concat(this.moduleAddress, \"::escrow::raise_dispute\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress,\n                    reason\n                ]\n            };\n            const response = await this.submitTransaction(sender, payload);\n            return !!response && !!response.hash;\n        } catch (error) {\n            console.error(\"Error raising dispute:\", error);\n            throw error;\n        }\n    }\n    // Resolve a dispute (arbiter only)\n    async resolveDispute(sender, resolution, resolutionNotes) {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const payload = {\n                type: \"entry_function_payload\",\n                function: \"\".concat(this.moduleAddress, \"::escrow::resolve_dispute\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress,\n                    resolution.toString(),\n                    resolutionNotes\n                ]\n            };\n            const response = await this.submitTransaction(sender, payload);\n            return !!response && !!response.hash;\n        } catch (error) {\n            console.error(\"Error resolving dispute:\", error);\n            throw error;\n        }\n    }\n    // Check if game has timed out\n    async checkTimeout(sender) {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const payload = {\n                type: \"entry_function_payload\",\n                function: \"\".concat(this.moduleAddress, \"::escrow::check_timeout\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress\n                ]\n            };\n            const response = await this.submitTransaction(sender, payload);\n            return !!response && !!response.hash;\n        } catch (error) {\n            console.error(\"Error checking timeout:\", error);\n            throw error;\n        }\n    }\n    // Cancel the escrow\n    async cancelEscrow(sender) {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const payload = {\n                type: \"entry_function_payload\",\n                function: \"\".concat(this.moduleAddress, \"::escrow::cancel_escrow\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress\n                ]\n            };\n            const response = await this.submitTransaction(sender, payload);\n            return !!response && !!response.hash;\n        } catch (error) {\n            console.error(\"Error cancelling escrow:\", error);\n            throw error;\n        }\n    }\n    // Refund after cancellation\n    async refundAfterCancellation(sender) {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const payload = {\n                type: \"entry_function_payload\",\n                function: \"\".concat(this.moduleAddress, \"::escrow::refund_after_cancellation\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress\n                ]\n            };\n            const response = await this.submitTransaction(sender, payload);\n            return !!response && !!response.hash;\n        } catch (error) {\n            console.error(\"Error refunding after cancellation:\", error);\n            throw error;\n        }\n    }\n    //\n    // View functions (read-only contract calls)\n    //\n    // Get escrow status\n    async getEscrowStatus() {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const resource = await this.client.getAccountResource(this.escrowAddress, \"\".concat(this.moduleAddress, \"::escrow::GameEscrow\"));\n            if (resource && resource.data) {\n                return resource.data.status;\n            }\n            throw new Error(\"Could not retrieve escrow status\");\n        } catch (error) {\n            console.error(\"Error getting escrow status:\", error);\n            throw error;\n        }\n    }\n    // Get winner address\n    async getWinner() {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const result = await this.client.view({\n                function: \"\".concat(this.moduleAddress, \"::escrow::get_winner\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress\n                ]\n            });\n            // The result will be an array with the Option<address>\n            // If Some(address), it will be an object with a vector\n            if (result && result.length > 0 && result[0]) {\n                return result[0];\n            }\n            return null; // None case (draw or not set)\n        } catch (error) {\n            console.error(\"Error getting winner:\", error);\n            throw error;\n        }\n    }\n    // Get escrow balance\n    async getEscrowBalance() {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const result = await this.client.view({\n                function: \"\".concat(this.moduleAddress, \"::escrow::get_escrow_balance\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress\n                ]\n            });\n            if (result && result.length > 0) {\n                // Convert octas to APT\n                return Number(result[0]) / 100000000;\n            }\n            return 0;\n        } catch (error) {\n            console.error(\"Error getting escrow balance:\", error);\n            throw error;\n        }\n    }\n    // Check if both deposits are complete\n    async areBothDepositsComplete() {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const result = await this.client.view({\n                function: \"\".concat(this.moduleAddress, \"::escrow::are_both_deposits_complete\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress\n                ]\n            });\n            if (result && result.length > 0) {\n                return Boolean(result[0]);\n            }\n            return false;\n        } catch (error) {\n            console.error(\"Error checking deposits completion:\", error);\n            throw error;\n        }\n    }\n    // Get minimum bet\n    async getMinimumBet() {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const result = await this.client.view({\n                function: \"\".concat(this.moduleAddress, \"::escrow::get_minimum_bet\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress\n                ]\n            });\n            if (result && result.length > 0) {\n                // Convert octas to APT\n                return Number(result[0]) / 100000000;\n            }\n            return 0;\n        } catch (error) {\n            console.error(\"Error getting minimum bet:\", error);\n            throw error;\n        }\n    }\n    // Get player info\n    async getPlayerInfo(playerAddress) {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const result = await this.client.view({\n                function: \"\".concat(this.moduleAddress, \"::escrow::get_player_info\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress,\n                    playerAddress\n                ]\n            });\n            if (result && result.length >= 3) {\n                return {\n                    hasDeposited: Boolean(result[0]),\n                    depositAmount: Number(result[1]) / 100000000,\n                    signedGameStart: Boolean(result[2])\n                };\n            }\n            throw new Error(\"Invalid player info result\");\n        } catch (error) {\n            console.error(\"Error getting player info:\", error);\n            throw error;\n        }\n    }\n    // Get total escrowed amount\n    async getTotalEscrowedAmount() {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const result = await this.client.view({\n                function: \"\".concat(this.moduleAddress, \"::escrow::get_total_escrowed_amount\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress\n                ]\n            });\n            if (result && result.length > 0) {\n                // Convert octas to APT\n                return Number(result[0]) / 100000000;\n            }\n            return 0;\n        } catch (error) {\n            console.error(\"Error getting total escrowed amount:\", error);\n            throw error;\n        }\n    }\n    // Get game time remaining\n    async getGameTimeRemaining() {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const result = await this.client.view({\n                function: \"\".concat(this.moduleAddress, \"::escrow::get_game_time_remaining\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress\n                ]\n            });\n            // The result will be an array with the Option<u64>\n            if (result && result.length > 0 && result[0]) {\n                return Number(result[0]);\n            }\n            return null; // None case (game not started or not in playing state)\n        } catch (error) {\n            console.error(\"Error getting game time remaining:\", error);\n            throw error;\n        }\n    }\n    // Helper method to submit a transaction\n    async submitTransaction(sender, payload) {\n        try {\n            // For direct wallet API (window.aptos) - try this first\n            if ( true && window.aptos) {\n                console.log(\"Using window.aptos wallet for transaction\");\n                return await window.aptos.signAndSubmitTransaction(payload);\n            }\n            // For Petra and similar wallets\n            if (sender && sender.signAndSubmitTransaction) {\n                console.log(\"Using provided wallet for transaction\");\n                return await sender.signAndSubmitTransaction(payload);\n            }\n            // If we get here, no compatible wallet was found\n            console.error(\"No compatible wallet found for transaction\");\n            throw new Error(\"No compatible wallet found\");\n        } catch (error) {\n            console.error(\"Transaction error:\", error);\n            throw error;\n        }\n    }\n    constructor(nodeUrl, moduleAddress){\n        this.escrowAddress = null;\n        this.client = new aptos__WEBPACK_IMPORTED_MODULE_0__.AptosClient(nodeUrl);\n        this.moduleAddress = moduleAddress;\n        // No longer setting escrow address to module address by default\n        console.log(\"Adapter created with module address:\", moduleAddress);\n    }\n}\nvar DisputeResolution;\n(function(DisputeResolution) {\n    DisputeResolution[DisputeResolution[\"DRAW\"] = 0] = \"DRAW\";\n    DisputeResolution[DisputeResolution[\"PLAYER1_WINS\"] = 1] = \"PLAYER1_WINS\";\n    DisputeResolution[DisputeResolution[\"PLAYER2_WINS\"] = 2] = \"PLAYER2_WINS\";\n    DisputeResolution[DisputeResolution[\"CANCEL\"] = 3] = \"CANCEL\";\n})(DisputeResolution || (DisputeResolution = {}));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/contracts/EscrowContractAdapter.ts\n"));

/***/ }),

/***/ "./src/hooks/useBetting.ts":
/*!*********************************!*\
  !*** ./src/hooks/useBetting.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useBetting: function() { return /* binding */ useBetting; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction useBetting() {\n    // Betting state\n    const [player1Bet, setPlayer1Bet] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [player2Bet, setPlayer2Bet] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [finalBetAmount, setFinalBetAmount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Calculate minimum bet\n    const getMinimumBet = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (player1Bet <= 0 || player2Bet <= 0) return 0;\n        return Math.min(player1Bet, player2Bet);\n    }, [\n        player1Bet,\n        player2Bet\n    ]);\n    // Announce bets for both players and calculate minimum\n    const announceUnifiedBet = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (player1Wallet, player2Wallet, onBetsAnnounced)=>{\n        setIsLoading(true);\n        setError(null);\n        try {\n            console.log(\"Announcing unified bet - Player 1: \".concat(player1Bet, \" APT, Player 2: \").concat(player2Bet, \" APT\"));\n            // Validate both players have wallets connected\n            if (!player1Wallet || !player2Wallet) {\n                throw new Error(\"Both players must connect their wallets before announcing bets\");\n            }\n            // Validate bet amounts\n            if (player1Bet <= 0 || player2Bet <= 0) {\n                throw new Error(\"Both players must enter valid bet amounts (greater than 0)\");\n            }\n            // Check sufficient funds\n            if (player1Wallet.balance < player1Bet) {\n                throw new Error(\"Player 1 has insufficient funds. Available: \".concat(player1Wallet.balance, \" APT, Bet: \").concat(player1Bet, \" APT\"));\n            }\n            if (player2Wallet.balance < player2Bet) {\n                throw new Error(\"Player 2 has insufficient funds. Available: \".concat(player2Wallet.balance, \" APT, Bet: \").concat(player2Bet, \" APT\"));\n            }\n            // Calculate minimum bet\n            const minimumBet = Math.min(player1Bet, player2Bet);\n            console.log(\"Calculated minimum bet: \".concat(minimumBet, \" APT\"));\n            // Set final bet amount (pot)\n            setFinalBetAmount(minimumBet * 2);\n            // Call the callback function to update game state\n            onBetsAnnounced();\n            console.log(\"Unified bet announcement successful\");\n        } catch (error) {\n            console.error(\"Error announcing unified bet:\", error);\n            setError(error.message || \"Failed to announce unified bet\");\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        player1Bet,\n        player2Bet\n    ]);\n    // Transfer funds between wallets (for simulation)\n    const updatePlayerBalance = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((playerNumber, amount, player1Wallet, player2Wallet, setPlayer1Wallet, setPlayer2Wallet)=>{\n        if (playerNumber === 1 && player1Wallet) {\n            setPlayer1Wallet({\n                ...player1Wallet,\n                balance: player1Wallet.balance + amount\n            });\n        } else if (playerNumber === 2 && player2Wallet) {\n            setPlayer2Wallet({\n                ...player2Wallet,\n                balance: player2Wallet.balance + amount\n            });\n        }\n    }, []);\n    // Reset betting state\n    const resetBettingState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setPlayer1Bet(0);\n        setPlayer2Bet(0);\n        setFinalBetAmount(0);\n    }, []);\n    return {\n        player1Bet,\n        setPlayer1Bet,\n        player2Bet,\n        setPlayer2Bet,\n        finalBetAmount,\n        setFinalBetAmount,\n        isLoading,\n        error,\n        setError,\n        getMinimumBet,\n        announceUnifiedBet,\n        updatePlayerBalance,\n        resetBettingState\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/hooks/useBetting.ts\n"));

/***/ }),

/***/ "./src/hooks/useChessGame.ts":
/*!***********************************!*\
  !*** ./src/hooks/useChessGame.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useChessGame: function() { return /* binding */ useChessGame; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var chess_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! chess.js */ \"./node_modules/chess.js/dist/esm/chess.js\");\n\n\nfunction useChessGame() {\n    // Game state\n    const [game, setGame] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(new chess_js__WEBPACK_IMPORTED_MODULE_1__.Chess());\n    const [gameState, setGameState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"waiting\");\n    const [currentPlayer, setCurrentPlayer] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"white\");\n    const [winner, setWinner] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Make a move in the chess game\n    const makeAMove = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((move)=>{\n        const gameCopy = new chess_js__WEBPACK_IMPORTED_MODULE_1__.Chess(game.fen());\n        try {\n            const result = gameCopy.move(move);\n            setGame(gameCopy);\n            // Switch turns\n            setCurrentPlayer(gameCopy.turn() === \"w\" ? \"white\" : \"black\");\n            return result;\n        } catch (error) {\n            return null;\n        }\n    }, [\n        game\n    ]);\n    // Handle dropping a piece on the chessboard\n    const onDrop = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((sourceSquare, targetSquare)=>{\n        // Only allow moves if the game is active\n        if (gameState !== \"playing\") return false;\n        // Enforce turn-based gameplay\n        const currentTurn = game.turn() === \"w\" ? \"white\" : \"black\";\n        // In the real game, check if it's the correct player's turn\n        // For now, we just allow the move based on white/black's turn\n        if (currentTurn !== currentPlayer) {\n            console.log(\"Not your turn. Current turn: \".concat(currentTurn));\n            return false;\n        }\n        const move = makeAMove({\n            from: sourceSquare,\n            to: targetSquare,\n            promotion: \"q\"\n        });\n        // If the move is illegal, return false\n        if (move === null) return false;\n        // Check for game over conditions\n        if (game.isGameOver()) {\n            handleGameEnd();\n        }\n        return true;\n    }, [\n        game,\n        gameState,\n        currentPlayer,\n        makeAMove\n    ]);\n    // Handle game end\n    const handleGameEnd = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((winnerParam)=>{\n        setGameState(\"completed\");\n        // Determine the winner if not provided\n        let currentWinner = winnerParam;\n        if (!currentWinner) {\n            // Determine winner based on the chess game state\n            if (game.isDraw()) {\n                currentWinner = \"draw\";\n            } else {\n                // White wins if it's not black's turn (checkmate)\n                currentWinner = game.turn() === \"b\" ? \"player1\" : \"player2\";\n            }\n        }\n        setWinner(currentWinner);\n        console.log(\"Game ended with winner: \".concat(currentWinner));\n        return currentWinner;\n    }, [\n        game\n    ]);\n    // Forfeit the current game\n    const forfeitGame = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((playerNumber)=>{\n        if (gameState !== \"playing\") {\n            console.log(\"Can only forfeit during an active game\");\n            return null;\n        }\n        setGameState(\"completed\");\n        // Determine the winner (opposite of the player who forfeited)\n        const winner = playerNumber === 1 ? \"player2\" : \"player1\";\n        console.log(\"Player \".concat(playerNumber, \" forfeited. \").concat(winner === \"player1\" ? \"Player 1\" : \"Player 2\", \" wins!\"));\n        // Set the winner\n        setWinner(winner);\n        return winner;\n    }, [\n        gameState\n    ]);\n    // Start a new game\n    const startNewGame = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setGame(new chess_js__WEBPACK_IMPORTED_MODULE_1__.Chess());\n        setGameState(\"waiting\");\n        setCurrentPlayer(\"white\");\n        setWinner(null);\n    }, []);\n    // Reset game state (but keep the board as is)\n    const resetGameState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        console.log(\"Resetting game state\");\n        setGameState(\"waiting\");\n        setWinner(null);\n        // Reset the game board\n        setGame(new chess_js__WEBPACK_IMPORTED_MODULE_1__.Chess());\n        // Reset current player\n        setCurrentPlayer(\"white\");\n        console.log(\"Game state reset complete\");\n    }, []);\n    return {\n        game,\n        setGame,\n        gameState,\n        setGameState,\n        currentPlayer,\n        setCurrentPlayer,\n        winner,\n        setWinner,\n        makeAMove,\n        onDrop,\n        handleGameEnd,\n        forfeitGame,\n        startNewGame,\n        resetGameState\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/hooks/useChessGame.ts\n"));

/***/ }),

/***/ "./src/hooks/useEscrow.ts":
/*!********************************!*\
  !*** ./src/hooks/useEscrow.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useEscrow: function() { return /* binding */ useEscrow; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _contracts_EscrowContractAdapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contracts/EscrowContractAdapter */ \"./src/contracts/EscrowContractAdapter.ts\");\n\n\nfunction useEscrow() {\n    // Escrow adapter for blockchain interactions\n    const escrowAdapter = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>new _contracts_EscrowContractAdapter__WEBPACK_IMPORTED_MODULE_1__.EscrowContractAdapter(\"https://fullnode.testnet.aptoslabs.com/v1\", \"0x1\" // Default module address, would be replaced with actual deployed address\n        ), []);\n    // Escrow state\n    const [useSimulationMode, setUseSimulationMode] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true); // Default to true since we're not really deploying\n    const [escrowLocked, setEscrowLocked] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [player1EscrowLocked, setPlayer1EscrowLocked] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [player2EscrowLocked, setPlayer2EscrowLocked] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [escrowAddress, setEscrowAddress] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [escrowStatus, setEscrowStatus] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(_contracts_EscrowContractAdapter__WEBPACK_IMPORTED_MODULE_1__.EscrowStatus.PENDING);\n    const [escrowBalance, setEscrowBalance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Initialize escrow\n    const initializeEscrow = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (player1Wallet, player2Wallet)=>{\n        if (!player1Wallet || !player2Wallet) {\n            console.error(\"Cannot initialize escrow: both players must be connected\");\n            setError(\"Both players must be connected to initialize the escrow\");\n            return;\n        }\n        try {\n            setIsLoading(true);\n            console.log(\"Initializing escrow contract\");\n            // In simulation mode, just set a fake address\n            if (useSimulationMode) {\n                try {\n                    const simulatedAddress = \"simulated_escrow_\" + Date.now();\n                    console.log(\"Creating simulated escrow with address:\", simulatedAddress);\n                    // Set the address in the adapter\n                    escrowAdapter.setEscrowAddress(simulatedAddress);\n                    // Set the address in our component state\n                    setEscrowAddress(simulatedAddress);\n                    console.log(\"Simulated escrow initialized with address:\", simulatedAddress);\n                    // Add a small delay to ensure state updates\n                    await new Promise((resolve)=>setTimeout(resolve, 100));\n                    setIsLoading(false);\n                    return;\n                } catch (simError) {\n                    console.error(\"Error in simulation mode:\", simError);\n                // Continue to try real mode, but log the error\n                }\n            }\n            // Try connecting to Player 1's wallet\n            console.log(\"Attempting to connect to Player 1's wallet for escrow initialization\");\n            // Show prompt for wallet connection\n            window.alert(\"Please make sure Player 1's wallet is selected in your Petra extension to initialize the escrow.\");\n            try {\n                const response = await window.aptos.connect();\n                // Ensure it's Player 1's wallet\n                if (response && response.address === player1Wallet.address) {\n                    console.log(\"Connected to correct wallet, creating escrow\");\n                    const createEscrowResult = await escrowAdapter.createEscrow(window.aptos, player1Wallet.address, player2Wallet.address, 0.1, player1Wallet.address, 24 * 60 * 60 // 24 hour timeout\n                    );\n                    if (createEscrowResult) {\n                        setEscrowAddress(createEscrowResult);\n                        console.log(\"Escrow contract created with address:\", createEscrowResult);\n                        setIsLoading(false);\n                        return;\n                    }\n                } else {\n                    console.warn(\"Connected to wrong wallet address:\", response === null || response === void 0 ? void 0 : response.address);\n                    throw new Error(\"Wrong wallet connected. Expected \".concat(player1Wallet.address, \" but got \").concat(response === null || response === void 0 ? void 0 : response.address, \". Please make sure Player 1's wallet is selected.\"));\n                }\n            } catch (error) {\n                console.error(\"Error with direct Petra connection:\", error);\n                throw error;\n            }\n        } catch (error) {\n            console.error(\"Error initializing escrow:\", error);\n            setError(error.message || \"Failed to initialize escrow\");\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        useSimulationMode,\n        escrowAdapter\n    ]);\n    // Create a simulated escrow (for testing)\n    const createSimulatedEscrow = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (!useSimulationMode) {\n            setError(\"Please enable simulation mode first\");\n            return;\n        }\n        console.log(\"Creating a simulated escrow for testing\");\n        const simulatedAddress = \"simulated_escrow_\" + Date.now();\n        escrowAdapter.setEscrowAddress(simulatedAddress);\n        setEscrowAddress(simulatedAddress);\n        console.log(\"Created simulated escrow with address:\", simulatedAddress);\n        // Also set escrow status to PENDING\n        setEscrowStatus(_contracts_EscrowContractAdapter__WEBPACK_IMPORTED_MODULE_1__.EscrowStatus.PENDING);\n    }, [\n        useSimulationMode,\n        escrowAdapter\n    ]);\n    // Connect escrow wallet\n    const connectEscrowWallet = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        setIsLoading(true);\n        setError(null);\n        try {\n            console.log(\"Connecting escrow wallet...\");\n            if ( false || !window.aptos) {\n                setError(\"Petra wallet is not installed. Please install the Petra wallet extension.\");\n                setIsLoading(false);\n                return;\n            }\n            // Prompt to select the escrow wallet\n            window.alert(\"Please make sure your ESCROW wallet is selected in your Petra extension.\");\n            const response = await window.aptos.connect();\n            console.log(\"Escrow wallet connection response:\", response);\n            if (response && response.address) {\n                console.log(\"Connected to escrow wallet:\", response.address);\n                // Set the escrow address in the adapter\n                escrowAdapter.setEscrowAddress(response.address);\n                // Set the address in component state\n                setEscrowAddress(response.address);\n                console.log(\"Escrow wallet set successfully:\", response.address);\n            } else {\n                throw new Error(\"Failed to get escrow wallet address\");\n            }\n        } catch (error) {\n            console.error(\"Error connecting escrow wallet:\", error);\n            setError(error.message || \"Failed to connect escrow wallet\");\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        escrowAdapter\n    ]);\n    // Lock the escrow by transferring the minimum bet amount from a specific player\n    const lockEscrow = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (playerNumber, player1Wallet, player2Wallet, player1Bet, player2Bet, ensureCorrectWalletConnected, getAccountBalance, transferToEscrow)=>{\n        setIsLoading(true);\n        setError(null);\n        try {\n            console.log(\"Starting escrow locking process for Player \".concat(playerNumber));\n            console.log(\"Current escrow lock status: Player 1: \".concat(player1EscrowLocked, \", Player 2: \").concat(player2EscrowLocked));\n            // Verify both players have placed bets\n            if (player1Bet <= 0 || player2Bet <= 0) {\n                throw new Error(\"Both players must announce bets before locking escrow\");\n            }\n            // Determine the minimum bet amount (this is what will be deducted)\n            const minimumBet = Math.min(player1Bet, player2Bet);\n            console.log(\"Minimum bet amount between players: \".concat(minimumBet, \" APT\"));\n            // Get player wallet\n            const playerWallet = playerNumber === 1 ? player1Wallet : player2Wallet;\n            if (!playerWallet) {\n                throw new Error(\"Player \".concat(playerNumber, \" wallet not connected\"));\n            }\n            // In simulation mode, create an escrow if not yet initialized\n            if (useSimulationMode && !escrowAddress) {\n                console.log(\"No escrow initialized yet, but in simulation mode. Creating escrow now...\");\n                const simulatedAddress = \"simulated_escrow_\" + Date.now();\n                escrowAdapter.setEscrowAddress(simulatedAddress);\n                setEscrowAddress(simulatedAddress);\n                console.log(\"Auto-created simulated escrow with address:\", simulatedAddress);\n                // Brief pause to let state update\n                await new Promise((resolve)=>setTimeout(resolve, 100));\n            }\n            // Make sure an escrow address is set\n            if (!escrowAddress) {\n                throw new Error(\"No escrow wallet connected. Please connect the escrow wallet first.\");\n            }\n            console.log(\"Depositing \".concat(minimumBet, \" APT to escrow contract from Player \").concat(playerNumber));\n            // Use simulation mode if enabled\n            if (useSimulationMode) {\n                console.log(\"Using simulation mode - no actual transfer will occur\");\n                // Simulate deposit\n                await new Promise((resolve)=>setTimeout(resolve, 1000));\n                // Update UI state\n                if (playerNumber === 1) {\n                    setPlayer1EscrowLocked(true);\n                } else {\n                    setPlayer2EscrowLocked(true);\n                }\n                console.log(\"Simulated escrow lock successful for Player \".concat(playerNumber));\n                // Update escrow balance in simulation mode\n                setEscrowBalance((prevBalance)=>prevBalance + minimumBet);\n            } else {\n                // Real deposit by transferring funds to the escrow address\n                // Make sure the player's wallet is connected\n                const isWalletConnected = await ensureCorrectWalletConnected(playerNumber);\n                if (!isWalletConnected) {\n                    throw new Error(\"Please connect the wallet for Player \".concat(playerNumber, \" to continue\"));\n                }\n                // Direct transfer to escrow address - using minimumBet instead of player's full bet\n                const transferSuccess = await transferToEscrow(playerNumber, minimumBet, escrowAddress);\n                if (!transferSuccess) {\n                    throw new Error(\"Failed to transfer funds to escrow for Player \".concat(playerNumber));\n                }\n                // Update UI state\n                if (playerNumber === 1) {\n                    setPlayer1EscrowLocked(true);\n                    // Refresh balance\n                    if (player1Wallet) {\n                        const newBalance = await getAccountBalance(player1Wallet.address);\n                    }\n                } else {\n                    setPlayer2EscrowLocked(true);\n                    // Refresh balance\n                    if (player2Wallet) {\n                        const newBalance = await getAccountBalance(player2Wallet.address);\n                    }\n                }\n                console.log(\"Escrow lock successful for Player \".concat(playerNumber));\n                // Update escrow balance - in real mode, we'd query the contract\n                if (escrowAddress) {\n                    const escrowBalanceResult = await getAccountBalance(escrowAddress);\n                    setEscrowBalance(escrowBalanceResult);\n                }\n            }\n            // Check if both players have locked their escrow after this player's lock\n            const bothPlayersLocked = playerNumber === 1 ?  true && player2EscrowLocked // Player 1 just locked + check if Player 2 was already locked\n             : player1EscrowLocked && true; // Check if Player 1 was already locked + Player 2 just locked\n            if (bothPlayersLocked) {\n                console.log(\"Both players have deposited funds to escrow. Ready to start game...\");\n                // Final pool amount is minimum bet × 2\n                const finalPoolAmount = minimumBet * 2;\n                console.log(\"Setting final bet amount to \".concat(finalPoolAmount, \" APT (\").concat(minimumBet, \" \\xd7 2)\"));\n                setEscrowLocked(true);\n            } else {\n                console.log(\"Waiting for the other player to lock their escrow\");\n            }\n            return {\n                wasLocked: true,\n                playerNumber,\n                minimumBet\n            };\n        } catch (error) {\n            console.error(\"Error locking escrow for Player \".concat(playerNumber, \":\"), error);\n            setError(error.message || \"Failed to lock escrow for Player \".concat(playerNumber));\n            return {\n                wasLocked: false,\n                error: error.message || \"Failed to lock escrow for Player \".concat(playerNumber)\n            };\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        useSimulationMode,\n        escrowAddress,\n        player1EscrowLocked,\n        player2EscrowLocked,\n        escrowAdapter\n    ]);\n    // Pay winner from escrow\n    const payWinner = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (winner, player1Wallet, player2Wallet, player1Bet, player2Bet, finalBetAmount, getAccountBalance)=>{\n        try {\n            if (!winner) return;\n            console.log(\"Paying winner: \".concat(winner));\n            // Only proceed if not in simulation mode and escrow is locked\n            if (!useSimulationMode && escrowLocked && escrowAddress) {\n                // Handle draw case\n                if (winner === \"draw\") {\n                    console.log(\"Draw game - returning funds to both players\");\n                    // For a draw, return original bet amounts to each player\n                    // Connect to escrow wallet first\n                    window.alert(\"Please select the ESCROW wallet in your Petra extension to return funds.\");\n                    const escrowWalletConnected = await window.aptos.connect();\n                    if (!escrowWalletConnected || escrowWalletConnected.address !== escrowAddress) {\n                        throw new Error(\"Failed to connect to escrow wallet. Please ensure the correct wallet is selected.\");\n                    }\n                    // Return funds to Player 1\n                    if (player1Wallet) {\n                        console.log(\"Returning \".concat(player1Bet, \" APT to Player 1 from escrow\"));\n                        const payload1 = {\n                            type: \"entry_function_payload\",\n                            function: \"0x1::coin::transfer\",\n                            type_arguments: [\n                                \"0x1::aptos_coin::AptosCoin\"\n                            ],\n                            arguments: [\n                                player1Wallet.address,\n                                Math.floor(player1Bet * 100000000).toString()\n                            ]\n                        };\n                        const txResponse1 = await window.aptos.signAndSubmitTransaction(payload1);\n                        console.log(\"Player 1 refund transaction:\", txResponse1);\n                    }\n                    // Return funds to Player 2\n                    if (player2Wallet) {\n                        console.log(\"Returning \".concat(player2Bet, \" APT to Player 2 from escrow\"));\n                        const payload2 = {\n                            type: \"entry_function_payload\",\n                            function: \"0x1::coin::transfer\",\n                            type_arguments: [\n                                \"0x1::aptos_coin::AptosCoin\"\n                            ],\n                            arguments: [\n                                player2Wallet.address,\n                                Math.floor(player2Bet * 100000000).toString()\n                            ]\n                        };\n                        const txResponse2 = await window.aptos.signAndSubmitTransaction(payload2);\n                        console.log(\"Player 2 refund transaction:\", txResponse2);\n                    }\n                } else {\n                    const winnerWallet = winner === \"player1\" ? player1Wallet : player2Wallet;\n                    if (!winnerWallet) {\n                        throw new Error(\"Winner wallet not found\");\n                    }\n                    console.log(\"Transferring \".concat(finalBetAmount, \" APT to winner (\").concat(winnerWallet.address, \")\"));\n                    // Connect to escrow wallet\n                    window.alert(\"Please select the ESCROW wallet in your Petra extension to pay the winner.\");\n                    const escrowWalletConnected = await window.aptos.connect();\n                    if (!escrowWalletConnected || escrowWalletConnected.address !== escrowAddress) {\n                        throw new Error(\"Failed to connect to escrow wallet. Please ensure the correct wallet is selected.\");\n                    }\n                    // Transfer all funds from escrow to winner\n                    const payload = {\n                        type: \"entry_function_payload\",\n                        function: \"0x1::coin::transfer\",\n                        type_arguments: [\n                            \"0x1::aptos_coin::AptosCoin\"\n                        ],\n                        arguments: [\n                            winnerWallet.address,\n                            Math.floor(finalBetAmount * 100000000).toString()\n                        ]\n                    };\n                    const txResponse = await window.aptos.signAndSubmitTransaction(payload);\n                    console.log(\"Winner payment transaction:\", txResponse);\n                }\n                // Update player balances after transfers\n                if (player1Wallet) {\n                    await getAccountBalance(player1Wallet.address);\n                }\n                if (player2Wallet) {\n                    await getAccountBalance(player2Wallet.address);\n                }\n            } else if (useSimulationMode) {\n                if (winner === \"draw\") {\n                    console.log(\"Draw game - both players receive their bets back (simulation)\");\n                } else {\n                    console.log(\"Updating Player \".concat(winner === \"player1\" ? \"1\" : \"2\", \" wallet balance: +\").concat(finalBetAmount, \" APT (simulation)\"));\n                }\n            }\n            console.log(\"Winner payment completed successfully\");\n        } catch (error) {\n            console.error(\"Error paying winner:\", error);\n            setError(error.message || \"Failed to pay winner\");\n        }\n    }, [\n        useSimulationMode,\n        escrowLocked,\n        escrowAddress\n    ]);\n    // Reset escrow state\n    const resetEscrowState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setPlayer1EscrowLocked(false);\n        setPlayer2EscrowLocked(false);\n        setEscrowLocked(false);\n        setEscrowStatus(_contracts_EscrowContractAdapter__WEBPACK_IMPORTED_MODULE_1__.EscrowStatus.PENDING);\n        setEscrowBalance(0);\n    }, []);\n    return {\n        useSimulationMode,\n        setUseSimulationMode,\n        escrowLocked,\n        setEscrowLocked,\n        player1EscrowLocked,\n        setPlayer1EscrowLocked,\n        player2EscrowLocked,\n        setPlayer2EscrowLocked,\n        escrowAddress,\n        setEscrowAddress,\n        escrowStatus,\n        setEscrowStatus,\n        escrowBalance,\n        setEscrowBalance,\n        isLoading,\n        error,\n        setError,\n        initializeEscrow,\n        createSimulatedEscrow,\n        connectEscrowWallet,\n        lockEscrow,\n        payWinner,\n        resetEscrowState,\n        escrowAdapter\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/hooks/useEscrow.ts\n"));

/***/ }),

/***/ "./src/hooks/useWalletConnection.ts":
/*!******************************************!*\
  !*** ./src/hooks/useWalletConnection.ts ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useWalletConnection: function() { return /* binding */ useWalletConnection; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var aptos__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! aptos */ \"./node_modules/aptos/dist/index.mjs\");\n\n\n// Define hook for wallet connection management\nfunction useWalletConnection() {\n    const [player1Wallet, setPlayer1Wallet] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [player2Wallet, setPlayer2Wallet] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [client] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(new aptos__WEBPACK_IMPORTED_MODULE_1__.AptosClient(\"https://fullnode.testnet.aptoslabs.com/v1\"));\n    // Get wallet balance\n    const getAccountBalance = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (address)=>{\n        try {\n            const resources = await client.getAccountResources(address);\n            const aptosCoinResource = resources.find((r)=>r.type === \"0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>\");\n            if (aptosCoinResource) {\n                const balance = aptosCoinResource.data.coin.value;\n                // Convert from octas (10^8) to APT\n                return Number(balance) / 100000000;\n            }\n            return 0;\n        } catch (error) {\n            console.error(\"Error getting account balance:\", error);\n            return 0;\n        }\n    }, [\n        client\n    ]);\n    // Connect player wallet\n    const connectPlayerWallet = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (playerNumber)=>{\n        // Prevent multiple connection attempts\n        if (isLoading) {\n            console.log(\"Connection already in progress, ignoring duplicate request\");\n            return;\n        }\n        setIsLoading(true);\n        setError(null);\n        try {\n            console.log(\"Connecting wallet for Player \".concat(playerNumber, \"...\"));\n            // Make sure there's a global aptos object\n            if ( false || !window.aptos) {\n                setError(\"Petra wallet is not installed. Please install the Petra wallet extension from https://petra.app/ and refresh the page.\");\n                setIsLoading(false);\n                return;\n            }\n            // Check if this player's wallet is already connected\n            const playerWallet = playerNumber === 1 ? player1Wallet : player2Wallet;\n            if (playerWallet) {\n                console.log(\"Player \".concat(playerNumber, \"'s wallet is already connected:\"), playerWallet.address);\n                setIsLoading(false);\n                return;\n            }\n            // Show the correct prompt based on player number\n            window.alert(\"Please make sure Player \".concat(playerNumber, \"'s wallet is selected in your Petra extension.\"));\n            // Direct connection approach - simplest and most reliable\n            try {\n                const response = await window.aptos.connect();\n                console.log(\"Wallet connection response for Player \".concat(playerNumber, \":\"), response);\n                if (response && response.address) {\n                    console.log(\"Connected to wallet for Player \".concat(playerNumber, \":\"), response.address);\n                    // Check if this wallet is already connected as the other player\n                    const otherPlayerWallet = playerNumber === 1 ? player2Wallet : player1Wallet;\n                    if (otherPlayerWallet && otherPlayerWallet.address === response.address) {\n                        const confirmUse = window.confirm(\"WARNING: This wallet (\".concat(response.address.substring(0, 6), \"...\").concat(response.address.substring(response.address.length - 4), \") is already connected as Player \").concat(playerNumber === 1 ? \"2\" : \"1\", \".\\n\\n\") + \"Using the same wallet for both players is NOT recommended for real games.\\n\\n\" + \"Do you want to continue using this wallet for both players?\");\n                        if (!confirmUse) {\n                            throw new Error(\"Please connect a different wallet for Player \".concat(playerNumber, \". Go to your Petra extension and switch accounts first.\"));\n                        }\n                        console.log(\"User confirmed using the same wallet for both players: \".concat(response.address));\n                    }\n                    // Get wallet balance\n                    const balance = await getAccountBalance(response.address);\n                    // Set the wallet in state\n                    const walletInfo = {\n                        address: response.address,\n                        balance: balance\n                    };\n                    if (playerNumber === 1) {\n                        setPlayer1Wallet(walletInfo);\n                    } else {\n                        setPlayer2Wallet(walletInfo);\n                    }\n                    console.log(\"Successfully set Player \".concat(playerNumber, \"'s wallet\"));\n                } else {\n                    throw new Error(\"Failed to get wallet address\");\n                }\n            } catch (error) {\n                console.error(\"Error connecting wallet for Player \".concat(playerNumber, \":\"), error);\n                throw new Error(\"Failed to connect wallet: \".concat(error.message || \"Unknown error\"));\n            }\n        } catch (error) {\n            console.error(\"Error in wallet connection for Player \".concat(playerNumber, \":\"), error);\n            setError(error.message || \"Failed to connect wallet for Player \".concat(playerNumber));\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        player1Wallet,\n        player2Wallet,\n        isLoading,\n        getAccountBalance\n    ]);\n    // Connect Player 2 Wallet with special handling\n    const connectPlayer2Wallet = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        // Show detailed instructions for switching wallets\n        if (player1Wallet) {\n            const walletPreface = player1Wallet.address.substring(0, 6) + \"...\" + player1Wallet.address.substring(player1Wallet.address.length - 4);\n        }\n        // Now try to connect Player 2's wallet\n        connectPlayerWallet(2);\n    }, [\n        player1Wallet,\n        connectPlayerWallet\n    ]);\n    // Disconnect wallet\n    const disconnectWallet = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((playerNumber)=>{\n        if (playerNumber === 1) {\n            setPlayer1Wallet(null);\n        } else {\n            setPlayer2Wallet(null);\n        }\n        // Try to disconnect from the Petra wallet if available\n        if (window && window.aptos && typeof window.aptos.disconnect === \"function\") {\n            window.aptos.disconnect().catch(console.error);\n        }\n    }, []);\n    // Reset all wallet connections\n    const resetWalletConnections = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        try {\n            setIsLoading(true);\n            console.log(\"Resetting wallet connections...\");\n            // Disconnect if possible\n            if (window && window.aptos && typeof window.aptos.disconnect === \"function\") {\n                await window.aptos.disconnect().catch(console.error);\n            }\n            // Reset state\n            setPlayer1Wallet(null);\n            setPlayer2Wallet(null);\n            console.log(\"Wallet connections reset successfully\");\n        } catch (error) {\n            console.error(\"Error resetting wallet connections:\", error);\n            setError(\"Failed to reset wallet connections. Please refresh the page.\");\n        } finally{\n            setIsLoading(false);\n        }\n    }, []);\n    // Set a manual wallet address (for simulation)\n    const setManualWalletAddress = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((playerNumber)=>{\n        // Prompt user for wallet address\n        const address = window.prompt(\"Enter wallet address for Player \".concat(playerNumber, \":\"));\n        if (!address || address.trim() === \"\") {\n            console.log(\"No address provided, cancelling manual wallet setup\");\n            return;\n        }\n        try {\n            console.log(\"Setting manual wallet address for Player \".concat(playerNumber, \": \").concat(address));\n            // Create wallet info with the provided address\n            // We'll assume a balance of 10 APT for testing purposes\n            const walletInfo = {\n                address: address.trim(),\n                balance: 10 // Default balance for testing\n            };\n            // Set the wallet for the appropriate player\n            if (playerNumber === 1) {\n                setPlayer1Wallet(walletInfo);\n            } else {\n                setPlayer2Wallet(walletInfo);\n            }\n        } catch (error) {\n            console.error(\"Error setting manual wallet for Player \".concat(playerNumber, \":\"), error);\n            setError(error.message || \"Failed to set manual wallet for Player \".concat(playerNumber));\n        }\n    }, []);\n    // Function to ensure the correct wallet is connected\n    const ensureCorrectWalletConnected = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (playerNumber)=>{\n        console.log(\"Ensuring wallet for Player \".concat(playerNumber, \" is connected\"));\n        try {\n            console.log(\"Attempting to connect to Player \".concat(playerNumber, \"'s wallet\"));\n            // Prompt user to switch to the correct wallet\n            window.alert(\"Please make sure Player \".concat(playerNumber, \"'s wallet is selected in your Petra extension.\"));\n            const response = await window.aptos.connect();\n            if (response && response.address) {\n                console.log(\"Connected to wallet with address: \".concat(response.address));\n                return true;\n            } else {\n                console.error(\"Failed to get wallet address\");\n                return false;\n            }\n        } catch (error) {\n            console.error(\"Error connecting to Player \".concat(playerNumber, \"'s wallet:\"), error);\n            return false;\n        }\n    }, []);\n    return {\n        player1Wallet,\n        player2Wallet,\n        isLoading,\n        error,\n        setError,\n        getAccountBalance,\n        connectPlayerWallet,\n        connectPlayer2Wallet,\n        disconnectWallet,\n        resetWalletConnections,\n        setManualWalletAddress,\n        ensureCorrectWalletConnected,\n        client\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/hooks/useWalletConnection.ts\n"));

/***/ }),

/***/ "./src/pages/index.tsx":
/*!*****************************!*\
  !*** ./src/pages/index.tsx ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Home; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/head */ \"./node_modules/next/head.js\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _aptos_labs_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aptos-labs/wallet-adapter-react */ \"./node_modules/@aptos-labs/wallet-adapter-react/dist/index.mjs\");\n/* harmony import */ var _components_LoadingComponent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/LoadingComponent */ \"./src/components/LoadingComponent.tsx\");\n/* harmony import */ var _components_PlayerPanel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/PlayerPanel */ \"./src/components/PlayerPanel.tsx\");\n/* harmony import */ var _components_ChessGamePanel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../components/ChessGamePanel */ \"./src/components/ChessGamePanel.tsx\");\n/* harmony import */ var _components_EscrowPanel__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../components/EscrowPanel */ \"./src/components/EscrowPanel.tsx\");\n/* harmony import */ var _utils_transactions__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/transactions */ \"./src/utils/transactions.ts\");\n/* harmony import */ var _hooks_useWalletConnection__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../hooks/useWalletConnection */ \"./src/hooks/useWalletConnection.ts\");\n/* harmony import */ var _hooks_useEscrow__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../hooks/useEscrow */ \"./src/hooks/useEscrow.ts\");\n/* harmony import */ var _hooks_useChessGame__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../hooks/useChessGame */ \"./src/hooks/useChessGame.ts\");\n/* harmony import */ var _hooks_useBetting__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../hooks/useBetting */ \"./src/hooks/useBetting.ts\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n// Import custom hooks\n\n\n\n\nfunction Home() {\n    _s();\n    // Use wallet adapter from Aptos\n    const { signAndSubmitTransaction, disconnect, connected, account } = (0,_aptos_labs_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_3__.useWallet)();\n    // Use our custom hooks for different aspects of the application\n    const walletHook = (0,_hooks_useWalletConnection__WEBPACK_IMPORTED_MODULE_9__.useWalletConnection)();\n    const escrowHook = (0,_hooks_useEscrow__WEBPACK_IMPORTED_MODULE_10__.useEscrow)();\n    const gameHook = (0,_hooks_useChessGame__WEBPACK_IMPORTED_MODULE_11__.useChessGame)();\n    const bettingHook = (0,_hooks_useBetting__WEBPACK_IMPORTED_MODULE_12__.useBetting)();\n    // Initialize escrow when both wallets are connected\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (walletHook.player1Wallet && walletHook.player2Wallet && !escrowHook.escrowAddress && !walletHook.isLoading) {\n            console.log(\"Both wallets connected, initializing escrow\");\n            // In simulation mode, create a simulated escrow automatically\n            if (escrowHook.useSimulationMode) {\n                escrowHook.createSimulatedEscrow();\n            }\n        }\n    }, [\n        walletHook.player1Wallet,\n        walletHook.player2Wallet,\n        escrowHook.escrowAddress,\n        walletHook.isLoading,\n        escrowHook.useSimulationMode\n    ]);\n    // Check if both players have locked their escrow and start the game if they have\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (escrowHook.player1EscrowLocked && escrowHook.player2EscrowLocked && gameHook.gameState !== \"playing\") {\n            // Calculate final bet amount\n            const minBetAmount = Math.min(bettingHook.player1Bet, bettingHook.player2Bet);\n            bettingHook.setFinalBetAmount(minBetAmount * 2);\n            // Update escrow status\n            escrowHook.setEscrowLocked(true);\n            // Start the game\n            gameHook.setGameState(\"playing\");\n        }\n    }, [\n        escrowHook.player1EscrowLocked,\n        escrowHook.player2EscrowLocked,\n        gameHook.gameState,\n        bettingHook\n    ]);\n    // Handle escrow locking from a player\n    const handleLockEscrow = async (playerNumber)=>{\n        // Use the escrow hook to lock the escrow\n        const result = await escrowHook.lockEscrow(playerNumber, walletHook.player1Wallet, walletHook.player2Wallet, bettingHook.player1Bet, bettingHook.player2Bet, walletHook.ensureCorrectWalletConnected, walletHook.getAccountBalance, async (playerNumber, amount, targetAddress)=>{\n            return (0,_utils_transactions__WEBPACK_IMPORTED_MODULE_8__.transferToEscrow)(playerNumber, amount, targetAddress, escrowHook.useSimulationMode);\n        });\n        // If the lock was successful and it was a simulation, update player wallet balances\n        if (result.wasLocked && escrowHook.useSimulationMode) {\n            const minimumBet = Math.min(bettingHook.player1Bet, bettingHook.player2Bet);\n            // Reduce the balance of the player who locked\n            if (playerNumber === 1 && walletHook.player1Wallet) {\n                walletHook.player1Wallet.balance -= minimumBet;\n            } else if (playerNumber === 2 && walletHook.player2Wallet) {\n                walletHook.player2Wallet.balance -= minimumBet;\n            }\n        }\n    };\n    // Announce bets\n    const handleAnnounceUnifiedBet = ()=>{\n        bettingHook.announceUnifiedBet(walletHook.player1Wallet, walletHook.player2Wallet, ()=>gameHook.setGameState(\"betting\"));\n    };\n    // Forfeit the current game\n    const handleForfeit = ()=>{\n        const currentPlayerNumber = gameHook.currentPlayer === \"white\" ? 1 : 2;\n        const winner = gameHook.forfeitGame(currentPlayerNumber);\n        if (winner) {\n            handleGameEnd(winner);\n        }\n    };\n    // Handle game end and payments\n    const handleGameEnd = async (winnerParam)=>{\n        // Determine the winner\n        const winner = winnerParam || gameHook.handleGameEnd();\n        // Pay the winner if escrow is locked\n        if (escrowHook.escrowLocked) {\n            await escrowHook.payWinner(winner, walletHook.player1Wallet, walletHook.player2Wallet, bettingHook.player1Bet, bettingHook.player2Bet, bettingHook.finalBetAmount, walletHook.getAccountBalance);\n            // If we're in simulation mode, update the player balances accordingly\n            if (escrowHook.useSimulationMode) {\n                if (winner === \"draw\") {\n                    // Return the bets to each player\n                    if (walletHook.player1Wallet) {\n                        walletHook.player1Wallet.balance += bettingHook.player1Bet;\n                    }\n                    if (walletHook.player2Wallet) {\n                        walletHook.player2Wallet.balance += bettingHook.player2Bet;\n                    }\n                } else {\n                    // Give the full pot to the winner\n                    if (winner === \"player1\" && walletHook.player1Wallet) {\n                        walletHook.player1Wallet.balance += bettingHook.finalBetAmount;\n                    } else if (winner === \"player2\" && walletHook.player2Wallet) {\n                        walletHook.player2Wallet.balance += bettingHook.finalBetAmount;\n                    }\n                }\n            }\n        }\n        // Reset the game state after a delay\n        setTimeout(()=>{\n            resetAllState();\n        }, 3000);\n    };\n    // Reset all state\n    const resetAllState = ()=>{\n        gameHook.resetGameState();\n        bettingHook.resetBettingState();\n        escrowHook.resetEscrowState();\n    };\n    // Start a new game\n    const handleStartNewGame = ()=>{\n        gameHook.startNewGame();\n        bettingHook.resetBettingState();\n        escrowHook.resetEscrowState();\n    };\n    // Initialize escrow contract\n    const handleInitializeEscrow = ()=>{\n        escrowHook.initializeEscrow(walletHook.player1Wallet, walletHook.player2Wallet);\n    };\n    // Show error panel if there's an error\n    const error = walletHook.error || escrowHook.error || bettingHook.error;\n    if (error) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"container mx-auto px-4 py-8\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"p-6 bg-red-50 border border-red-200 rounded-lg max-w-lg mx-auto\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                        className: \"text-xl font-bold text-red-800 mb-2\",\n                        children: \"Error\"\n                    }, void 0, false, {\n                        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/pages/index.tsx\",\n                        lineNumber: 179,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-red-600 mb-4\",\n                        children: error\n                    }, void 0, false, {\n                        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/pages/index.tsx\",\n                        lineNumber: 180,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex gap-3\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>{\n                                    walletHook.setError(null);\n                                    escrowHook.setError(null);\n                                    bettingHook.setError(null);\n                                },\n                                className: \"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700\",\n                                children: \"Dismiss\"\n                            }, void 0, false, {\n                                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/pages/index.tsx\",\n                                lineNumber: 182,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: walletHook.resetWalletConnections,\n                                className: \"px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700\",\n                                children: \"Reset Wallet Connections\"\n                            }, void 0, false, {\n                                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/pages/index.tsx\",\n                                lineNumber: 192,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/pages/index.tsx\",\n                        lineNumber: 181,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/pages/index.tsx\",\n                lineNumber: 178,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/pages/index.tsx\",\n            lineNumber: 177,\n            columnNumber: 7\n        }, this);\n    }\n    // Show loading state\n    const isLoading = walletHook.isLoading || escrowHook.isLoading || bettingHook.isLoading;\n    if (isLoading) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_LoadingComponent__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {}, void 0, false, {\n            fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/pages/index.tsx\",\n            lineNumber: 207,\n            columnNumber: 12\n        }, this);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"container mx-auto px-4 py-8\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_head__WEBPACK_IMPORTED_MODULE_2___default()), {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"title\", {\n                        children: \"Chess Game with Aptos\"\n                    }, void 0, false, {\n                        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/pages/index.tsx\",\n                        lineNumber: 213,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n                        name: \"description\",\n                        content: \"Play chess with Aptos blockchain integration\"\n                    }, void 0, false, {\n                        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/pages/index.tsx\",\n                        lineNumber: 214,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"link\", {\n                        rel: \"icon\",\n                        href: \"/favicon.ico\"\n                    }, void 0, false, {\n                        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/pages/index.tsx\",\n                        lineNumber: 215,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/pages/index.tsx\",\n                lineNumber: 212,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                className: \"text-3xl font-bold text-center mb-8\",\n                children: \"Chess Game with Aptos\"\n            }, void 0, false, {\n                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/pages/index.tsx\",\n                lineNumber: 218,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"grid grid-cols-1 md:grid-cols-3 gap-6\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_PlayerPanel__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                        playerNumber: 1,\n                        playerWallet: walletHook.player1Wallet,\n                        playerBet: bettingHook.player1Bet,\n                        playerEscrowLocked: escrowHook.player1EscrowLocked,\n                        otherPlayerBet: bettingHook.player2Bet,\n                        gameState: gameHook.gameState,\n                        useSimulationMode: escrowHook.useSimulationMode,\n                        onConnectWallet: walletHook.connectPlayerWallet,\n                        onDisconnectWallet: walletHook.disconnectWallet,\n                        onSetManualWalletAddress: walletHook.setManualWalletAddress,\n                        onLockEscrow: ()=>handleLockEscrow(1)\n                    }, void 0, false, {\n                        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/pages/index.tsx\",\n                        lineNumber: 222,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ChessGamePanel__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                        game: gameHook.game,\n                        gameState: gameHook.gameState,\n                        currentPlayer: gameHook.currentPlayer,\n                        winner: gameHook.winner,\n                        finalBetAmount: bettingHook.finalBetAmount,\n                        player1Wallet: walletHook.player1Wallet,\n                        player2Wallet: walletHook.player2Wallet,\n                        player1Bet: bettingHook.player1Bet,\n                        player2Bet: bettingHook.player2Bet,\n                        onDrop: gameHook.onDrop,\n                        onAnnounceUnifiedBet: handleAnnounceUnifiedBet,\n                        onStartNewGame: handleStartNewGame,\n                        onForfeit: handleForfeit,\n                        onPlayer1BetChange: bettingHook.setPlayer1Bet,\n                        onPlayer2BetChange: bettingHook.setPlayer2Bet\n                    }, void 0, false, {\n                        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/pages/index.tsx\",\n                        lineNumber: 237,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_PlayerPanel__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                        playerNumber: 2,\n                        playerWallet: walletHook.player2Wallet,\n                        playerBet: bettingHook.player2Bet,\n                        playerEscrowLocked: escrowHook.player2EscrowLocked,\n                        otherPlayerBet: bettingHook.player1Bet,\n                        gameState: gameHook.gameState,\n                        useSimulationMode: escrowHook.useSimulationMode,\n                        onConnectWallet: ()=>walletHook.connectPlayer2Wallet(),\n                        onDisconnectWallet: walletHook.disconnectWallet,\n                        onSetManualWalletAddress: walletHook.setManualWalletAddress,\n                        onLockEscrow: ()=>handleLockEscrow(2)\n                    }, void 0, false, {\n                        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/pages/index.tsx\",\n                        lineNumber: 256,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/pages/index.tsx\",\n                lineNumber: 220,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_EscrowPanel__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                escrowAddress: escrowHook.escrowAddress,\n                escrowStatus: escrowHook.escrowStatus,\n                escrowBalance: escrowHook.escrowBalance,\n                useSimulationMode: escrowHook.useSimulationMode,\n                setUseSimulationMode: escrowHook.setUseSimulationMode,\n                onConnectEscrowWallet: escrowHook.connectEscrowWallet,\n                onDisconnectEscrow: ()=>escrowHook.setEscrowAddress(null),\n                onCreateSimulatedEscrow: escrowHook.createSimulatedEscrow,\n                onInitializeEscrow: handleInitializeEscrow,\n                onResetGame: resetAllState,\n                onResetWallets: walletHook.resetWalletConnections\n            }, void 0, false, {\n                fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/pages/index.tsx\",\n                lineNumber: 272,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/ayushsinghchauhan/Downloads/dont_delete/cd3/src/pages/index.tsx\",\n        lineNumber: 211,\n        columnNumber: 5\n    }, this);\n}\n_s(Home, \"S7pAH5oMpDvY/TN9/vYfWmSvHEM=\", false, function() {\n    return [\n        _aptos_labs_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_3__.useWallet,\n        _hooks_useWalletConnection__WEBPACK_IMPORTED_MODULE_9__.useWalletConnection,\n        _hooks_useEscrow__WEBPACK_IMPORTED_MODULE_10__.useEscrow,\n        _hooks_useChessGame__WEBPACK_IMPORTED_MODULE_11__.useChessGame,\n        _hooks_useBetting__WEBPACK_IMPORTED_MODULE_12__.useBetting\n    ];\n});\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pages/index.tsx\n"));

/***/ }),

/***/ "./node_modules/next/head.js":
/*!***********************************!*\
  !*** ./node_modules/next/head.js ***!
  \***********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("module.exports = __webpack_require__(/*! ./dist/shared/lib/head */ \"./node_modules/next/dist/shared/lib/head.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9oZWFkLmpzIiwibWFwcGluZ3MiOiJBQUFBLGlIQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9oZWFkLmpzPzg4NDkiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3Qvc2hhcmVkL2xpYi9oZWFkJylcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/head.js\n"));

/***/ })

});