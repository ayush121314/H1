"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/utils/transactions.ts":
/*!***********************************!*\
  !*** ./src/utils/transactions.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatWalletAddress: function() { return /* binding */ formatWalletAddress; },\n/* harmony export */   getWalletConnectionInstructions: function() { return /* binding */ getWalletConnectionInstructions; },\n/* harmony export */   isPetraWalletAvailable: function() { return /* binding */ isPetraWalletAvailable; },\n/* harmony export */   transferToEscrow: function() { return /* binding */ transferToEscrow; }\n/* harmony export */ });\n/* harmony import */ var aptos__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aptos */ \"./node_modules/aptos/dist/index.mjs\");\n\n// Initialize the Aptos client\nconst client = new aptos__WEBPACK_IMPORTED_MODULE_0__.AptosClient(\"https://fullnode.testnet.aptoslabs.com/v1\");\n// Helper function to transfer funds from a player to the escrow\nasync function transferToEscrow(playerNumber, amount, targetAddress) {\n    let useSimulationMode = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;\n    console.log(\"Transferring \".concat(amount, \" APT from Player \").concat(playerNumber, \" to \").concat(targetAddress));\n    // For testing only - simulation mode doesn't do actual transfers\n    if (useSimulationMode) {\n        console.log(\"Using simulation mode for escrow transfer (no actual funds will be moved)\");\n        await new Promise((resolve)=>setTimeout(resolve, 1000)); // Mock transaction delay\n        return true;\n    }\n    // Validate target address\n    if (!targetAddress || targetAddress.trim() === \"\") {\n        console.error(\"Invalid target address:\", targetAddress);\n        throw new Error(\"Invalid recipient address. Unable to process transfer.\");\n    }\n    // Convert amount to octas\n    const amountInOctas = Math.floor(amount * 100000000).toString();\n    console.log(\"Amount in Octas: \".concat(amountInOctas));\n    // Create payload\n    const payload = {\n        type: \"entry_function_payload\",\n        function: \"0x1::coin::transfer\",\n        type_arguments: [\n            \"0x1::aptos_coin::AptosCoin\"\n        ],\n        arguments: [\n            targetAddress,\n            amountInOctas\n        ]\n    };\n    console.log(\"Transaction payload created:\", JSON.stringify(payload));\n    // Submit the transaction - try direct method first\n    try {\n        let txHash = \"\";\n        // Try direct Petra method first\n        if (window.aptos && typeof window.aptos.signAndSubmitTransaction === \"function\") {\n            console.log(\"Using direct Petra wallet for transaction\");\n            try {\n                // Force focus on current window to help popup appear\n                window.focus();\n                const response = await window.aptos.signAndSubmitTransaction(payload);\n                console.log(\"Direct transaction response:\", response);\n                if (response && response.hash) {\n                    txHash = response.hash;\n                    console.log(\"Transaction hash received:\", txHash);\n                } else {\n                    console.error(\"Direct transaction response missing hash:\", response);\n                }\n            } catch (directError) {\n                console.error(\"Direct transaction error:\", directError);\n                if (directError.message) {\n                    throw new Error(\"Transaction failed: \".concat(directError.message));\n                }\n            }\n        }\n        // If we still don't have a hash, the transaction failed\n        if (!txHash) {\n            throw new Error(\"Transaction failed. Make sure your wallet is unlocked and has sufficient funds.\");\n        }\n        // Wait for transaction confirmation\n        console.log(\"Transaction submitted with hash: \".concat(txHash));\n        try {\n            console.log(\"Waiting for transaction confirmation...\");\n            const txResult = await client.waitForTransactionWithResult(txHash);\n            console.log(\"Transfer for Player \".concat(playerNumber, \" confirmed:\"), txResult);\n            return true;\n        } catch (confirmError) {\n            console.warn(\"Error confirming transaction:\", confirmError);\n            // Transaction might still go through, so we'll consider this a success\n            console.log(\"Continuing despite confirmation error (transaction may still be processing)\");\n            return true;\n        }\n    } catch (txError) {\n        console.error(\"Error in transfer for Player \".concat(playerNumber, \":\"), txError);\n        if (txError.message) {\n            throw new Error(\"Failed to transfer funds: \".concat(txError.message));\n        } else {\n            throw new Error(\"Failed to transfer funds. Please check your wallet and try again.\");\n        }\n    }\n}\n// Function to check if Petra wallet is installed and available\nfunction isPetraWalletAvailable() {\n    return  true && typeof window.aptos !== \"undefined\" && typeof window.aptos.connect === \"function\";\n}\n// Helper function to format wallet address for display\nfunction formatWalletAddress(address) {\n    if (!address) return \"\";\n    if (address.length < 10) return address;\n    return \"\".concat(address.substring(0, 6), \"...\").concat(address.substring(address.length - 4));\n}\n// Helper function to get instructions based on player number\nfunction getWalletConnectionInstructions(playerNumber) {\n    if (playerNumber === 1) {\n        return \"Connect your Player 1 wallet by clicking the button below.\";\n    } else {\n        return \"Connect your Player 2 wallet by clicking the button below.\";\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/transactions.ts\n"));

/***/ })

});