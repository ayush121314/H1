"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/hooks/useEscrow.ts":
/*!********************************!*\
  !*** ./src/hooks/useEscrow.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useEscrow: function() { return /* binding */ useEscrow; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _contracts_EscrowContractAdapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contracts/EscrowContractAdapter */ \"./src/contracts/EscrowContractAdapter.ts\");\n\n\nfunction useEscrow() {\n    // Escrow adapter for blockchain interactions\n    const escrowAdapter = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>new _contracts_EscrowContractAdapter__WEBPACK_IMPORTED_MODULE_1__.EscrowContractAdapter(\"https://fullnode.testnet.aptoslabs.com/v1\", \"0x1\" // Default module address, would be replaced with actual deployed address\n        ), []);\n    // Escrow state\n    const [useSimulationMode, setUseSimulationMode] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false); // Default to false for production use\n    const [escrowLocked, setEscrowLocked] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [player1EscrowLocked, setPlayer1EscrowLocked] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [player2EscrowLocked, setPlayer2EscrowLocked] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [escrowAddress, setEscrowAddress] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [escrowStatus, setEscrowStatus] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(_contracts_EscrowContractAdapter__WEBPACK_IMPORTED_MODULE_1__.EscrowStatus.PENDING);\n    const [escrowBalance, setEscrowBalance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Initialize escrow\n    const initializeEscrow = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (player1Wallet, player2Wallet)=>{\n        if (!player1Wallet || !player2Wallet) {\n            console.error(\"Cannot initialize escrow: both players must be connected\");\n            setError(\"Both players must be connected to initialize the escrow\");\n            return;\n        }\n        try {\n            setIsLoading(true);\n            console.log(\"Initializing escrow contract\");\n            // In simulation mode, just set a fake address\n            if (useSimulationMode) {\n                try {\n                    const simulatedAddress = \"simulated_escrow_\" + Date.now();\n                    console.log(\"Creating simulated escrow with address:\", simulatedAddress);\n                    // Set the address in the adapter\n                    escrowAdapter.setEscrowAddress(simulatedAddress);\n                    // Set the address in our component state\n                    setEscrowAddress(simulatedAddress);\n                    console.log(\"Simulated escrow initialized with address:\", simulatedAddress);\n                    // Add a small delay to ensure state updates\n                    await new Promise((resolve)=>setTimeout(resolve, 100));\n                    setIsLoading(false);\n                    return;\n                } catch (simError) {\n                    console.error(\"Error in simulation mode:\", simError);\n                // Continue to try real mode, but log the error\n                }\n            }\n            // Try connecting to Player 1's wallet\n            console.log(\"Attempting to connect to Player 1's wallet for escrow initialization\");\n            // Show prompt for wallet connection\n            window.alert(\"Please make sure a SEPARATE ESCROW wallet is selected in your Petra extension to initialize the escrow. This should NOT be the same as Player 1 or Player 2's wallet.\");\n            try {\n                const response = await window.aptos.connect();\n                // Check if this wallet is the same as player 1 or player 2\n                if (response && response.address === player1Wallet.address) {\n                    window.alert(\"Error: This wallet is the same as Player 1's wallet. Please select a different wallet for escrow.\");\n                    throw new Error(\"Escrow wallet cannot be the same as Player 1's wallet.\");\n                }\n                if (response && response.address === player2Wallet.address) {\n                    window.alert(\"Error: This wallet is the same as Player 2's wallet. Please select a different wallet for escrow.\");\n                    throw new Error(\"Escrow wallet cannot be the same as Player 2's wallet.\");\n                }\n                // Proceed with escrow initialization\n                if (response && response.address) {\n                    console.log(\"Connected to wallet, creating escrow\");\n                    const initializeEscrowResult = await escrowAdapter.initializeEscrow(window.aptos, player1Wallet.address, player2Wallet.address, 0.1, 24 * 60 * 60 // 24 hour timeout\n                    );\n                    if (initializeEscrowResult) {\n                        setEscrowAddress(initializeEscrowResult);\n                        console.log(\"Escrow contract created with address:\", initializeEscrowResult);\n                        setIsLoading(false);\n                        return;\n                    }\n                } else {\n                    console.warn(\"Connected to wrong wallet address:\", response === null || response === void 0 ? void 0 : response.address);\n                    throw new Error(\"Failed to connect wallet. Please make sure a valid wallet is selected.\");\n                }\n            } catch (error) {\n                console.error(\"Error with direct Petra connection:\", error);\n                throw error;\n            }\n        } catch (error) {\n            console.error(\"Error initializing escrow:\", error);\n            setError(error.message || \"Failed to initialize escrow\");\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        useSimulationMode,\n        escrowAdapter\n    ]);\n    // Create a simulated escrow (for testing)\n    const createSimulatedEscrow = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (!useSimulationMode) {\n            setError(\"Please enable simulation mode first\");\n            return;\n        }\n        console.log(\"Creating a simulated escrow for testing\");\n        const simulatedAddress = \"simulated_escrow_\" + Date.now();\n        escrowAdapter.setEscrowAddress(simulatedAddress);\n        setEscrowAddress(simulatedAddress);\n        console.log(\"Created simulated escrow with address:\", simulatedAddress);\n        // Also set escrow status to PENDING\n        setEscrowStatus(_contracts_EscrowContractAdapter__WEBPACK_IMPORTED_MODULE_1__.EscrowStatus.PENDING);\n    }, [\n        useSimulationMode,\n        escrowAdapter\n    ]);\n    // Connect escrow wallet\n    const connectEscrowWallet = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (player1Wallet, player2Wallet)=>{\n        setIsLoading(true);\n        setError(null);\n        try {\n            console.log(\"Connecting escrow wallet...\");\n            if ( false || !window.aptos) {\n                setError(\"Petra wallet is not installed. Please install the Petra wallet extension.\");\n                setIsLoading(false);\n                return;\n            }\n            // Prompt to select the escrow wallet\n            window.alert(\"Please make sure your ESCROW wallet is selected in your Petra extension.\\nIMPORTANT: This should be DIFFERENT from Player 1 and Player 2 wallets.\");\n            const response = await window.aptos.connect();\n            console.log(\"Escrow wallet connection response:\", response);\n            if (response && response.address) {\n                console.log(\"Connected to escrow wallet:\", response.address);\n                // Check if the wallet is the same as player 1 or player 2\n                if (player1Wallet && player1Wallet.address === response.address) {\n                    window.alert(\"Error: This wallet is already being used by Player 1. Please select a different wallet for escrow.\");\n                    throw new Error(\"Escrow wallet cannot be the same as Player 1's wallet.\");\n                }\n                if (player2Wallet && player2Wallet.address === response.address) {\n                    window.alert(\"Error: This wallet is already being used by Player 2. Please select a different wallet for escrow.\");\n                    throw new Error(\"Escrow wallet cannot be the same as Player 2's wallet.\");\n                }\n                // Set the escrow address in the adapter\n                escrowAdapter.setEscrowAddress(response.address);\n                // Set the address in component state\n                setEscrowAddress(response.address);\n                console.log(\"Escrow wallet set successfully:\", response.address);\n            } else {\n                throw new Error(\"Failed to get escrow wallet address\");\n            }\n        } catch (error) {\n            console.error(\"Error connecting escrow wallet:\", error);\n            setError(error.message || \"Failed to connect escrow wallet\");\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        escrowAdapter\n    ]);\n    // Lock the escrow by transferring the minimum bet amount from a specific player\n    const lockEscrow = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (playerNumber, player1Wallet, player2Wallet, player1Bet, player2Bet, ensureCorrectWalletConnected, getAccountBalance, transferToEscrow)=>{\n        setIsLoading(true);\n        setError(null);\n        try {\n            console.log(\"Starting escrow locking process for Player \".concat(playerNumber));\n            console.log(\"Current escrow lock status: Player 1: \".concat(player1EscrowLocked, \", Player 2: \").concat(player2EscrowLocked));\n            // Verify both players have placed bets\n            if (player1Bet <= 0 || player2Bet <= 0) {\n                throw new Error(\"Both players must announce bets before locking escrow\");\n            }\n            // Determine the minimum bet amount (this is what will be deducted)\n            const minimumBet = Math.min(player1Bet, player2Bet);\n            console.log(\"Minimum bet amount between players: \".concat(minimumBet, \" APT\"));\n            // Get player wallet\n            const playerWallet = playerNumber === 1 ? player1Wallet : player2Wallet;\n            if (!playerWallet) {\n                throw new Error(\"Player \".concat(playerNumber, \" wallet not connected\"));\n            }\n            // In simulation mode, create an escrow if not yet initialized\n            if (useSimulationMode && !escrowAddress) {\n                console.log(\"No escrow initialized yet, but in simulation mode. Creating escrow now...\");\n                const simulatedAddress = \"simulated_escrow_\" + Date.now();\n                escrowAdapter.setEscrowAddress(simulatedAddress);\n                setEscrowAddress(simulatedAddress);\n                console.log(\"Auto-created simulated escrow with address:\", simulatedAddress);\n                // Brief pause to let state update\n                await new Promise((resolve)=>setTimeout(resolve, 100));\n            }\n            // Make sure an escrow address is set\n            if (!escrowAddress) {\n                throw new Error(\"No escrow wallet connected. Please connect the escrow wallet first.\");\n            }\n            console.log(\"Depositing \".concat(minimumBet, \" APT to escrow contract from Player \").concat(playerNumber));\n            // Use simulation mode if enabled\n            if (useSimulationMode) {\n                console.log(\"Using simulation mode - no actual transfer will occur\");\n                // Simulate deposit\n                await new Promise((resolve)=>setTimeout(resolve, 1000));\n                // Update UI state\n                if (playerNumber === 1) {\n                    setPlayer1EscrowLocked(true);\n                } else {\n                    setPlayer2EscrowLocked(true);\n                }\n                console.log(\"Simulated escrow lock successful for Player \".concat(playerNumber));\n                // Update escrow balance in simulation mode\n                setEscrowBalance((prevBalance)=>prevBalance + minimumBet);\n            } else {\n                // Real deposit by transferring funds to the escrow address\n                // Make sure the player's wallet is connected - strict verification\n                let maxAttempts = 3;\n                let isWalletConnected = false;\n                for(let attempt = 1; attempt <= maxAttempts; attempt++){\n                    isWalletConnected = await ensureCorrectWalletConnected(playerNumber);\n                    if (isWalletConnected) {\n                        break;\n                    }\n                    if (attempt < maxAttempts) {\n                        // Ask if they want to try again\n                        const shouldRetry = window.confirm(\"Failed to connect the correct wallet for Player \".concat(playerNumber, \". Do you want to try again? (Attempt \").concat(attempt, \"/\").concat(maxAttempts, \")\"));\n                        if (!shouldRetry) {\n                            throw new Error(\"Escrow locking cancelled - correct wallet for Player \".concat(playerNumber, \" was not connected.\"));\n                        }\n                    } else {\n                        throw new Error(\"Failed to connect the correct wallet for Player \".concat(playerNumber, \" after \").concat(maxAttempts, \" attempts.\"));\n                    }\n                }\n                if (!isWalletConnected) {\n                    throw new Error(\"Could not verify Player \".concat(playerNumber, \"'s wallet. Please make sure the correct wallet is connected.\"));\n                }\n                // Direct transfer to escrow address - using minimumBet instead of player's full bet\n                const transferSuccess = await transferToEscrow(playerNumber, minimumBet, escrowAddress);\n                if (!transferSuccess) {\n                    throw new Error(\"Failed to transfer funds to escrow for Player \".concat(playerNumber));\n                }\n                // Update UI state\n                if (playerNumber === 1) {\n                    setPlayer1EscrowLocked(true);\n                    // Refresh balance\n                    if (player1Wallet) {\n                        const newBalance = await getAccountBalance(player1Wallet.address);\n                    }\n                } else {\n                    setPlayer2EscrowLocked(true);\n                    // Refresh balance\n                    if (player2Wallet) {\n                        const newBalance = await getAccountBalance(player2Wallet.address);\n                    }\n                }\n                console.log(\"Escrow lock successful for Player \".concat(playerNumber));\n                // Update escrow balance - in real mode, we'd query the contract\n                if (escrowAddress) {\n                    const escrowBalanceResult = await getAccountBalance(escrowAddress);\n                    setEscrowBalance(escrowBalanceResult);\n                }\n            }\n            // Check if both players have locked their escrow after this player's lock\n            const bothPlayersLocked = playerNumber === 1 ?  true && player2EscrowLocked // Player 1 just locked + check if Player 2 was already locked\n             : player1EscrowLocked && true; // Check if Player 1 was already locked + Player 2 just locked\n            if (bothPlayersLocked) {\n                console.log(\"Both players have deposited funds to escrow. Ready to start game...\");\n                // Final pool amount is minimum bet × 2\n                const finalPoolAmount = minimumBet * 2;\n                console.log(\"Setting final bet amount to \".concat(finalPoolAmount, \" APT (\").concat(minimumBet, \" \\xd7 2)\"));\n                setEscrowLocked(true);\n            } else {\n                console.log(\"Waiting for the other player to lock their escrow\");\n            }\n            return {\n                wasLocked: true,\n                playerNumber,\n                minimumBet\n            };\n        } catch (error) {\n            console.error(\"Error locking escrow for Player \".concat(playerNumber, \":\"), error);\n            setError(error.message || \"Failed to lock escrow for Player \".concat(playerNumber));\n            return {\n                wasLocked: false,\n                error: error.message || \"Failed to lock escrow for Player \".concat(playerNumber)\n            };\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        useSimulationMode,\n        escrowAddress,\n        player1EscrowLocked,\n        player2EscrowLocked,\n        escrowAdapter\n    ]);\n    // Pay winner from escrow\n    const payWinner = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (winner, player1Wallet, player2Wallet, player1Bet, player2Bet, finalBetAmount, getAccountBalance)=>{\n        try {\n            if (!winner) return;\n            console.log(\"Paying winner: \".concat(winner));\n            // Only proceed if not in simulation mode and escrow is locked\n            if (!useSimulationMode && escrowLocked && escrowAddress) {\n                // Verify escrow wallet - with retry mechanism\n                let maxAttempts = 3;\n                let escrowWalletConnected = null;\n                let isCorrectWallet = false;\n                for(let attempt = 1; attempt <= maxAttempts; attempt++){\n                    // Show clear instructions about which wallet to connect\n                    window.alert(\"Please select the ESCROW wallet (\".concat(escrowAddress.substring(0, 6), \"...\").concat(escrowAddress.substring(escrowAddress.length - 4), \") in your Petra extension to transfer funds.\\n          \\nIMPORTANT: Only the escrow wallet can be used for this operation.\"));\n                    try {\n                        escrowWalletConnected = await window.aptos.connect();\n                        if (escrowWalletConnected && escrowWalletConnected.address === escrowAddress) {\n                            isCorrectWallet = true;\n                            console.log(\"Successfully connected to escrow wallet:\", escrowWalletConnected.address);\n                            break;\n                        } else {\n                            // Wrong wallet connected\n                            window.alert(\"Error: Wrong wallet connected. \\n              \\nExpected the escrow wallet (\".concat(escrowAddress.substring(0, 6), \"...\").concat(escrowAddress.substring(escrowAddress.length - 4), \") \\n\\nbut got a different wallet (\").concat(escrowWalletConnected === null || escrowWalletConnected === void 0 ? void 0 : escrowWalletConnected.address.substring(0, 6), \"...\").concat(escrowWalletConnected === null || escrowWalletConnected === void 0 ? void 0 : escrowWalletConnected.address.substring(escrowWalletConnected.address.length - 4), \").\"));\n                            if (attempt < maxAttempts) {\n                                const shouldRetry = window.confirm(\"Failed to connect the correct escrow wallet. Do you want to try again? (Attempt \".concat(attempt, \"/\").concat(maxAttempts, \")\"));\n                                if (!shouldRetry) {\n                                    throw new Error(\"Operation cancelled - escrow wallet was not connected.\");\n                                }\n                            }\n                        }\n                    } catch (error) {\n                        console.error(\"Error connecting to wallet:\", error);\n                        if (attempt < maxAttempts) {\n                            const shouldRetry = window.confirm(\"Error connecting to wallet. Do you want to try again? (Attempt \".concat(attempt, \"/\").concat(maxAttempts, \")\"));\n                            if (!shouldRetry) {\n                                throw new Error(\"Operation cancelled due to wallet connection error.\");\n                            }\n                        } else {\n                            throw new Error(\"Failed to connect wallet after \".concat(maxAttempts, \" attempts.\"));\n                        }\n                    }\n                }\n                if (!isCorrectWallet) {\n                    throw new Error(\"Failed to connect to the correct escrow wallet. Please ensure the correct wallet is selected.\");\n                }\n                // Handle draw case\n                if (winner === \"draw\") {\n                    console.log(\"Draw game - returning funds to both players\");\n                    // For a draw, return original bet amounts to each player\n                    // Return funds to Player 1\n                    if (player1Wallet) {\n                        console.log(\"Returning \".concat(player1Bet, \" APT to Player 1 from escrow\"));\n                        const payload1 = {\n                            type: \"entry_function_payload\",\n                            function: \"0x1::coin::transfer\",\n                            type_arguments: [\n                                \"0x1::aptos_coin::AptosCoin\"\n                            ],\n                            arguments: [\n                                player1Wallet.address,\n                                Math.floor(player1Bet * 100000000).toString()\n                            ]\n                        };\n                        const txResponse1 = await window.aptos.signAndSubmitTransaction(payload1);\n                        console.log(\"Player 1 refund transaction:\", txResponse1);\n                    }\n                    // Return funds to Player 2\n                    if (player2Wallet) {\n                        console.log(\"Returning \".concat(player2Bet, \" APT to Player 2 from escrow\"));\n                        const payload2 = {\n                            type: \"entry_function_payload\",\n                            function: \"0x1::coin::transfer\",\n                            type_arguments: [\n                                \"0x1::aptos_coin::AptosCoin\"\n                            ],\n                            arguments: [\n                                player2Wallet.address,\n                                Math.floor(player2Bet * 100000000).toString()\n                            ]\n                        };\n                        const txResponse2 = await window.aptos.signAndSubmitTransaction(payload2);\n                        console.log(\"Player 2 refund transaction:\", txResponse2);\n                    }\n                } else {\n                    const winnerWallet = winner === \"player1\" ? player1Wallet : player2Wallet;\n                    if (!winnerWallet) {\n                        throw new Error(\"Winner wallet not found\");\n                    }\n                    console.log(\"Transferring \".concat(finalBetAmount, \" APT to winner (\").concat(winnerWallet.address, \")\"));\n                    // Transfer all funds from escrow to winner\n                    const payload = {\n                        type: \"entry_function_payload\",\n                        function: \"0x1::coin::transfer\",\n                        type_arguments: [\n                            \"0x1::aptos_coin::AptosCoin\"\n                        ],\n                        arguments: [\n                            winnerWallet.address,\n                            Math.floor(finalBetAmount * 100000000).toString()\n                        ]\n                    };\n                    const txResponse = await window.aptos.signAndSubmitTransaction(payload);\n                    console.log(\"Winner payment transaction:\", txResponse);\n                }\n                // Update player balances after transfers\n                if (player1Wallet) {\n                    await getAccountBalance(player1Wallet.address);\n                }\n                if (player2Wallet) {\n                    await getAccountBalance(player2Wallet.address);\n                }\n            } else if (useSimulationMode) {\n                if (winner === \"draw\") {\n                    console.log(\"Draw game - both players receive their bets back (simulation)\");\n                } else {\n                    console.log(\"Updating Player \".concat(winner === \"player1\" ? \"1\" : \"2\", \" wallet balance: +\").concat(finalBetAmount, \" APT (simulation)\"));\n                }\n            }\n            console.log(\"Winner payment completed successfully\");\n        } catch (error) {\n            console.error(\"Error paying winner:\", error);\n            setError(error.message || \"Failed to pay winner\");\n        }\n    }, [\n        useSimulationMode,\n        escrowLocked,\n        escrowAddress\n    ]);\n    // Reset escrow state\n    const resetEscrowState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setPlayer1EscrowLocked(false);\n        setPlayer2EscrowLocked(false);\n        setEscrowLocked(false);\n        setEscrowStatus(_contracts_EscrowContractAdapter__WEBPACK_IMPORTED_MODULE_1__.EscrowStatus.PENDING);\n        setEscrowBalance(0);\n    }, []);\n    return {\n        useSimulationMode,\n        setUseSimulationMode,\n        escrowLocked,\n        setEscrowLocked,\n        player1EscrowLocked,\n        setPlayer1EscrowLocked,\n        player2EscrowLocked,\n        setPlayer2EscrowLocked,\n        escrowAddress,\n        setEscrowAddress,\n        escrowStatus,\n        setEscrowStatus,\n        escrowBalance,\n        setEscrowBalance,\n        isLoading,\n        error,\n        setError,\n        initializeEscrow,\n        createSimulatedEscrow,\n        connectEscrowWallet,\n        lockEscrow,\n        payWinner,\n        resetEscrowState,\n        escrowAdapter\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/hooks/useEscrow.ts\n"));

/***/ })

});