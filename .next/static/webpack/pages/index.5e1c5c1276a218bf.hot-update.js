"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/hooks/useWalletConnection.ts":
/*!******************************************!*\
  !*** ./src/hooks/useWalletConnection.ts ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useWalletConnection: function() { return /* binding */ useWalletConnection; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var aptos__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! aptos */ \"./node_modules/aptos/dist/index.mjs\");\n\n\n// Define hook for wallet connection management\nfunction useWalletConnection() {\n    const [player1Wallet, setPlayer1Wallet] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [player2Wallet, setPlayer2Wallet] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [client] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(new aptos__WEBPACK_IMPORTED_MODULE_1__.AptosClient(\"https://fullnode.testnet.aptoslabs.com/v1\"));\n    // Get wallet balance\n    const getAccountBalance = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (address)=>{\n        try {\n            const resources = await client.getAccountResources(address);\n            const aptosCoinResource = resources.find((r)=>r.type === \"0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>\");\n            if (aptosCoinResource) {\n                const balance = aptosCoinResource.data.coin.value;\n                // Convert from octas (10^8) to APT\n                return Number(balance) / 100000000;\n            }\n            return 0;\n        } catch (error) {\n            console.error(\"Error getting account balance:\", error);\n            return 0;\n        }\n    }, [\n        client\n    ]);\n    // Connect player wallet\n    const connectPlayerWallet = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (playerNumber)=>{\n        // Prevent multiple connection attempts\n        if (isLoading) {\n            console.log(\"Connection already in progress, ignoring duplicate request\");\n            return;\n        }\n        setIsLoading(true);\n        setError(null);\n        try {\n            console.log(\"Connecting wallet for Player \".concat(playerNumber, \"...\"));\n            // Make sure there's a global aptos object\n            if ( false || !window.aptos) {\n                setError(\"Petra wallet is not installed. Please install the Petra wallet extension from https://petra.app/ and refresh the page.\");\n                setIsLoading(false);\n                return;\n            }\n            // Check if this player's wallet is already connected\n            const playerWallet = playerNumber === 1 ? player1Wallet : player2Wallet;\n            if (playerWallet) {\n                console.log(\"Player \".concat(playerNumber, \"'s wallet is already connected:\"), playerWallet.address);\n                setIsLoading(false);\n                return;\n            }\n            // Show the correct prompt based on player number\n            window.alert(\"Please make sure Player \".concat(playerNumber, \"'s wallet is selected in your Petra extension.\"));\n            // Direct connection approach - simplest and most reliable\n            try {\n                const response = await window.aptos.connect();\n                console.log(\"Wallet connection response for Player \".concat(playerNumber, \":\"), response);\n                if (response && response.address) {\n                    console.log(\"Connected to wallet for Player \".concat(playerNumber, \":\"), response.address);\n                    // Check if this wallet is already connected as the other player\n                    const otherPlayerWallet = playerNumber === 1 ? player2Wallet : player1Wallet;\n                    if (otherPlayerWallet && otherPlayerWallet.address === response.address) {\n                        // Block connection with error instead of asking for confirmation\n                        window.alert(\"Error: This wallet (\".concat(response.address.substring(0, 6), \"...\").concat(response.address.substring(response.address.length - 4), \") is already connected as Player \").concat(playerNumber === 1 ? \"2\" : \"1\", \".\\n\\n\") + \"Please connect a different wallet for Player \".concat(playerNumber, \". Go to your Petra extension and switch accounts first.\"));\n                        throw new Error(\"Cannot use the same wallet for both players. Please connect a different wallet for Player \".concat(playerNumber, \".\"));\n                    }\n                    // Get wallet balance\n                    const balance = await getAccountBalance(response.address);\n                    // Set the wallet in state\n                    const walletInfo = {\n                        address: response.address,\n                        balance: balance\n                    };\n                    if (playerNumber === 1) {\n                        setPlayer1Wallet(walletInfo);\n                    } else {\n                        setPlayer2Wallet(walletInfo);\n                    }\n                    console.log(\"Successfully set Player \".concat(playerNumber, \"'s wallet\"));\n                } else {\n                    throw new Error(\"Failed to get wallet address\");\n                }\n            } catch (error) {\n                console.error(\"Error connecting wallet for Player \".concat(playerNumber, \":\"), error);\n                throw new Error(\"Failed to connect wallet: \".concat(error.message || \"Unknown error\"));\n            }\n        } catch (error) {\n            console.error(\"Error in wallet connection for Player \".concat(playerNumber, \":\"), error);\n            setError(error.message || \"Failed to connect wallet for Player \".concat(playerNumber));\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        player1Wallet,\n        player2Wallet,\n        isLoading,\n        getAccountBalance\n    ]);\n    // Connect Player 2 Wallet with special handling\n    const connectPlayer2Wallet = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        // Show detailed instructions for switching wallets\n        if (player1Wallet) {\n            const walletPreface = player1Wallet.address.substring(0, 6) + \"...\" + player1Wallet.address.substring(player1Wallet.address.length - 4);\n            window.alert(\"You're about to connect Player 2's wallet.\\n\\n\" + \"Player 1 is currently using wallet: \".concat(walletPreface, \"\\n\\n\") + \"IMPORTANT: Please make sure you've switched to a DIFFERENT wallet in your Petra extension before proceeding.\");\n        }\n        // Now try to connect Player 2's wallet\n        connectPlayerWallet(2);\n    }, [\n        player1Wallet,\n        connectPlayerWallet\n    ]);\n    // Disconnect wallet\n    const disconnectWallet = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((playerNumber)=>{\n        if (playerNumber === 1) {\n            setPlayer1Wallet(null);\n        } else {\n            setPlayer2Wallet(null);\n        }\n        // Try to disconnect from the Petra wallet if available\n        if (window && window.aptos && typeof window.aptos.disconnect === \"function\") {\n            window.aptos.disconnect().catch(console.error);\n        }\n    }, []);\n    // Reset all wallet connections\n    const resetWalletConnections = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        try {\n            setIsLoading(true);\n            console.log(\"Resetting wallet connections...\");\n            // Disconnect if possible\n            if (window && window.aptos && typeof window.aptos.disconnect === \"function\") {\n                await window.aptos.disconnect().catch(console.error);\n            }\n            // Reset state\n            setPlayer1Wallet(null);\n            setPlayer2Wallet(null);\n            console.log(\"Wallet connections reset successfully\");\n        } catch (error) {\n            console.error(\"Error resetting wallet connections:\", error);\n            setError(\"Failed to reset wallet connections. Please refresh the page.\");\n        } finally{\n            setIsLoading(false);\n        }\n    }, []);\n    // Set a manual wallet address (for simulation)\n    const setManualWalletAddress = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((playerNumber)=>{\n        // Prompt user for wallet address\n        const address = window.prompt(\"Enter wallet address for Player \".concat(playerNumber, \":\"));\n        if (!address || address.trim() === \"\") {\n            console.log(\"No address provided, cancelling manual wallet setup\");\n            return;\n        }\n        try {\n            console.log(\"Setting manual wallet address for Player \".concat(playerNumber, \": \").concat(address));\n            // Create wallet info with the provided address\n            // We'll assume a balance of 10 APT for testing purposes\n            const walletInfo = {\n                address: address.trim(),\n                balance: 10 // Default balance for testing\n            };\n            // Set the wallet for the appropriate player\n            if (playerNumber === 1) {\n                setPlayer1Wallet(walletInfo);\n            } else {\n                setPlayer2Wallet(walletInfo);\n            }\n        } catch (error) {\n            console.error(\"Error setting manual wallet for Player \".concat(playerNumber, \":\"), error);\n            setError(error.message || \"Failed to set manual wallet for Player \".concat(playerNumber));\n        }\n    }, []);\n    // Function to ensure the correct wallet is connected\n    const ensureCorrectWalletConnected = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (playerNumber)=>{\n        console.log(\"Ensuring wallet for Player \".concat(playerNumber, \" is connected\"));\n        try {\n            console.log(\"Attempting to connect to Player \".concat(playerNumber, \"'s wallet\"));\n            // Prompt user to switch to the correct wallet\n            window.alert(\"Please make sure Player \".concat(playerNumber, \"'s wallet is selected in your Petra extension.\"));\n            const response = await window.aptos.connect();\n            if (response && response.address) {\n                console.log(\"Connected to wallet with address: \".concat(response.address));\n                return true;\n            } else {\n                console.error(\"Failed to get wallet address\");\n                return false;\n            }\n        } catch (error) {\n            console.error(\"Error connecting to Player \".concat(playerNumber, \"'s wallet:\"), error);\n            return false;\n        }\n    }, []);\n    return {\n        player1Wallet,\n        player2Wallet,\n        isLoading,\n        error,\n        setError,\n        getAccountBalance,\n        connectPlayerWallet,\n        connectPlayer2Wallet,\n        disconnectWallet,\n        resetWalletConnections,\n        setManualWalletAddress,\n        ensureCorrectWalletConnected,\n        client\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/hooks/useWalletConnection.ts\n"));

/***/ })

});