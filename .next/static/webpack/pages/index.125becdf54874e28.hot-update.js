"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/contracts/EscrowContractAdapter.ts":
/*!************************************************!*\
  !*** ./src/contracts/EscrowContractAdapter.ts ***!
  \************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DisputeResolution: function() { return /* binding */ DisputeResolution; },\n/* harmony export */   EscrowContractAdapter: function() { return /* binding */ EscrowContractAdapter; },\n/* harmony export */   EscrowStatus: function() { return /* binding */ EscrowStatus; }\n/* harmony export */ });\n/* harmony import */ var aptos__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aptos */ \"./node_modules/aptos/dist/index.mjs\");\n\nvar EscrowStatus;\n(function(EscrowStatus) {\n    EscrowStatus[EscrowStatus[\"PENDING\"] = 0] = \"PENDING\";\n    EscrowStatus[EscrowStatus[\"FUNDED\"] = 1] = \"FUNDED\";\n    EscrowStatus[EscrowStatus[\"PLAYING\"] = 2] = \"PLAYING\";\n    EscrowStatus[EscrowStatus[\"COMPLETED\"] = 3] = \"COMPLETED\";\n    EscrowStatus[EscrowStatus[\"DISPUTED\"] = 4] = \"DISPUTED\";\n    EscrowStatus[EscrowStatus[\"CANCELLED\"] = 5] = \"CANCELLED\";\n    EscrowStatus[EscrowStatus[\"TIMED_OUT\"] = 6] = \"TIMED_OUT\";\n})(EscrowStatus || (EscrowStatus = {}));\n// Class to interface with the chess escrow contract on Aptos\nclass EscrowContractAdapter {\n    // Set the escrow contract address\n    setEscrowAddress(address) {\n        console.log(\"Setting escrow address to: \".concat(address));\n        this.escrowAddress = address;\n    }\n    // Get the escrow address\n    getEscrowAddress() {\n        return this.escrowAddress;\n    }\n    // Initialize a new escrow contract using any wallet\n    async initializeEscrow(sender, player1Address, player2Address, minimumBet) {\n        let timeoutSeconds = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 24 * 60 * 60;\n        try {\n            // Convert APT to octas (smallest unit) - 1 APT = 10^8 Octas\n            const minimumBetOctas = (minimumBet * 100000000).toString();\n            // Get the wallet address to set as escrow (could be a completely new wallet)\n            let walletAddress;\n            // Try different wallet API styles to get the address\n            if (sender.account) {\n                // Standard Petra wallet\n                const response = await sender.account();\n                walletAddress = response.address;\n            } else if ( true && window.aptos) {\n                // window.aptos API\n                const response = await window.aptos.connect();\n                walletAddress = response.address;\n            } else {\n                throw new Error(\"Could not determine wallet address\");\n            }\n            // Validate the escrow wallet is not the same as player wallets\n            if (walletAddress === player1Address) {\n                throw new Error(\"Escrow wallet cannot be the same as Player 1's wallet\");\n            }\n            if (walletAddress === player2Address) {\n                throw new Error(\"Escrow wallet cannot be the same as Player 2's wallet\");\n            }\n            console.log(\"Using wallet as escrow: \".concat(walletAddress));\n            // Use the moduleAddress as the arbiter for simplicity\n            const arbiterAddress = this.moduleAddress;\n            const payload = {\n                type: \"entry_function_payload\",\n                function: \"\".concat(this.moduleAddress, \"::chess_escrow::create_escrow\"),\n                type_arguments: [],\n                arguments: [\n                    player1Address,\n                    player2Address,\n                    minimumBetOctas,\n                    arbiterAddress,\n                    timeoutSeconds.toString()\n                ]\n            };\n            console.log(\"Initializing escrow with payload:\", JSON.stringify(payload, null, 2));\n            const txResponse = await this.submitTransaction(sender, payload);\n            if (txResponse && txResponse.hash) {\n                // Set the escrow address to the wallet address that initialized it\n                this.escrowAddress = walletAddress;\n                console.log(\"Escrow initialized with address: \".concat(walletAddress));\n                console.log(\"Transaction hash: \".concat(txResponse.hash));\n                return walletAddress;\n            }\n            return null;\n        } catch (error) {\n            console.error(\"Error initializing escrow:\", error);\n            throw error;\n        }\n    }\n    // Deposit funds into the escrow\n    async deposit(sender, amount) {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            // Convert APT to octas\n            const amountInOctas = (amount * 100000000).toString();\n            const payload = {\n                type: \"entry_function_payload\",\n                function: \"\".concat(this.moduleAddress, \"::escrow::deposit\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress,\n                    amountInOctas\n                ]\n            };\n            const response = await this.submitTransaction(sender, payload);\n            return !!response && !!response.hash;\n        } catch (error) {\n            console.error(\"Error depositing to escrow:\", error);\n            throw error;\n        }\n    }\n    // Sign to start the game\n    async signToStartGame(sender) {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const payload = {\n                type: \"entry_function_payload\",\n                function: \"\".concat(this.moduleAddress, \"::escrow::sign_to_start_game\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress\n                ]\n            };\n            const response = await this.submitTransaction(sender, payload);\n            return !!response && !!response.hash;\n        } catch (error) {\n            console.error(\"Error signing to start game:\", error);\n            throw error;\n        }\n    }\n    // Complete the game with a winner - includes automatic fund release\n    async completeGame(sender, winnerAddress) {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        console.log(\"Completing game with winner: \".concat(winnerAddress));\n        console.log(\"Using escrow address: \".concat(this.escrowAddress));\n        try {\n            // Verify wallet connection\n            if ( true && window.aptos) {\n                const walletInfo = await window.aptos.connect();\n                console.log(\"Connected wallet for transaction: \".concat(walletInfo.address));\n            }\n            const payload = {\n                type: \"entry_function_payload\",\n                function: \"\".concat(this.moduleAddress, \"::escrow::complete_game\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress,\n                    winnerAddress\n                ]\n            };\n            const response = await this.submitTransaction(sender, payload);\n            // Automatically release funds without requiring approval\n            if (response && response.hash) {\n                console.log(\"Game completed, funds will be automatically transferred to the winner\");\n                console.log(\"Transaction hash:\", response.hash);\n                // Wait for the transaction to be confirmed before releasing funds\n                await this.client.waitForTransactionWithResult(response.hash);\n                try {\n                    await this.releaseFunds(sender);\n                } catch (error) {\n                    console.error(\"Error releasing funds automatically, may need manual release:\", error);\n                }\n            }\n            return !!response && !!response.hash;\n        } catch (error) {\n            console.error(\"Error completing game:\", error);\n            throw error;\n        }\n    }\n    // Complete the game as a draw - includes automatic fund release\n    async completeGameAsDraw(sender) {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        console.log(\"Completing game as draw\");\n        console.log(\"Using escrow address: \".concat(this.escrowAddress));\n        try {\n            // Verify wallet connection\n            if ( true && window.aptos) {\n                const walletInfo = await window.aptos.connect();\n                console.log(\"Connected wallet for transaction: \".concat(walletInfo.address));\n            }\n            const payload = {\n                type: \"entry_function_payload\",\n                function: \"\".concat(this.moduleAddress, \"::escrow::complete_game_as_draw\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress\n                ]\n            };\n            const response = await this.submitTransaction(sender, payload);\n            // Automatically release funds without requiring approval\n            if (response && response.hash) {\n                console.log(\"Game completed as draw, funds will be automatically returned to players\");\n                console.log(\"Transaction hash:\", response.hash);\n                // Wait for the transaction to be confirmed before releasing funds\n                await this.client.waitForTransactionWithResult(response.hash);\n                try {\n                    await this.releaseFunds(sender);\n                } catch (error) {\n                    console.error(\"Error releasing funds automatically, may need manual release:\", error);\n                }\n            }\n            return !!response && !!response.hash;\n        } catch (error) {\n            console.error(\"Error completing game as draw:\", error);\n            throw error;\n        }\n    }\n    // Release funds to the winner or back to players in case of a draw\n    async releaseFunds(sender) {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const payload = {\n                type: \"entry_function_payload\",\n                function: \"\".concat(this.moduleAddress, \"::escrow::release_funds\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress\n                ]\n            };\n            // This transaction doesn't require approval - it's automated\n            const response = await this.submitTransaction(sender, payload);\n            console.log(\"Funds released to the appropriate recipient(s)\");\n            return !!response && !!response.hash;\n        } catch (error) {\n            console.error(\"Error releasing funds:\", error);\n            throw error;\n        }\n    }\n    // Raise a dispute\n    async raiseDispute(sender, reason) {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const payload = {\n                type: \"entry_function_payload\",\n                function: \"\".concat(this.moduleAddress, \"::escrow::raise_dispute\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress,\n                    reason\n                ]\n            };\n            const response = await this.submitTransaction(sender, payload);\n            return !!response && !!response.hash;\n        } catch (error) {\n            console.error(\"Error raising dispute:\", error);\n            throw error;\n        }\n    }\n    // Resolve a dispute (arbiter only)\n    async resolveDispute(sender, resolution, resolutionNotes) {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const payload = {\n                type: \"entry_function_payload\",\n                function: \"\".concat(this.moduleAddress, \"::escrow::resolve_dispute\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress,\n                    resolution.toString(),\n                    resolutionNotes\n                ]\n            };\n            const response = await this.submitTransaction(sender, payload);\n            return !!response && !!response.hash;\n        } catch (error) {\n            console.error(\"Error resolving dispute:\", error);\n            throw error;\n        }\n    }\n    // Check if game has timed out\n    async checkTimeout(sender) {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const payload = {\n                type: \"entry_function_payload\",\n                function: \"\".concat(this.moduleAddress, \"::escrow::check_timeout\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress\n                ]\n            };\n            const response = await this.submitTransaction(sender, payload);\n            return !!response && !!response.hash;\n        } catch (error) {\n            console.error(\"Error checking timeout:\", error);\n            throw error;\n        }\n    }\n    // Cancel the escrow\n    async cancelEscrow(sender) {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const payload = {\n                type: \"entry_function_payload\",\n                function: \"\".concat(this.moduleAddress, \"::escrow::cancel_escrow\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress\n                ]\n            };\n            const response = await this.submitTransaction(sender, payload);\n            return !!response && !!response.hash;\n        } catch (error) {\n            console.error(\"Error cancelling escrow:\", error);\n            throw error;\n        }\n    }\n    // Refund after cancellation\n    async refundAfterCancellation(sender) {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const payload = {\n                type: \"entry_function_payload\",\n                function: \"\".concat(this.moduleAddress, \"::escrow::refund_after_cancellation\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress\n                ]\n            };\n            const response = await this.submitTransaction(sender, payload);\n            return !!response && !!response.hash;\n        } catch (error) {\n            console.error(\"Error refunding after cancellation:\", error);\n            throw error;\n        }\n    }\n    //\n    // View functions (read-only contract calls)\n    //\n    // Get escrow status\n    async getEscrowStatus() {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const resource = await this.client.getAccountResource(this.escrowAddress, \"\".concat(this.moduleAddress, \"::escrow::GameEscrow\"));\n            if (resource && resource.data) {\n                return resource.data.status;\n            }\n            throw new Error(\"Could not retrieve escrow status\");\n        } catch (error) {\n            console.error(\"Error getting escrow status:\", error);\n            throw error;\n        }\n    }\n    // Get winner address\n    async getWinner() {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const result = await this.client.view({\n                function: \"\".concat(this.moduleAddress, \"::escrow::get_winner\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress\n                ]\n            });\n            // The result will be an array with the Option<address>\n            // If Some(address), it will be an object with a vector\n            if (result && result.length > 0 && result[0]) {\n                return result[0];\n            }\n            return null; // None case (draw or not set)\n        } catch (error) {\n            console.error(\"Error getting winner:\", error);\n            throw error;\n        }\n    }\n    // Get escrow balance\n    async getEscrowBalance() {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const result = await this.client.view({\n                function: \"\".concat(this.moduleAddress, \"::escrow::get_escrow_balance\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress\n                ]\n            });\n            if (result && result.length > 0) {\n                // Convert octas to APT\n                return Number(result[0]) / 100000000;\n            }\n            return 0;\n        } catch (error) {\n            console.error(\"Error getting escrow balance:\", error);\n            throw error;\n        }\n    }\n    // Check if both deposits are complete\n    async areBothDepositsComplete() {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const result = await this.client.view({\n                function: \"\".concat(this.moduleAddress, \"::escrow::are_both_deposits_complete\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress\n                ]\n            });\n            if (result && result.length > 0) {\n                return Boolean(result[0]);\n            }\n            return false;\n        } catch (error) {\n            console.error(\"Error checking deposits completion:\", error);\n            throw error;\n        }\n    }\n    // Get minimum bet\n    async getMinimumBet() {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const result = await this.client.view({\n                function: \"\".concat(this.moduleAddress, \"::escrow::get_minimum_bet\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress\n                ]\n            });\n            if (result && result.length > 0) {\n                // Convert octas to APT\n                return Number(result[0]) / 100000000;\n            }\n            return 0;\n        } catch (error) {\n            console.error(\"Error getting minimum bet:\", error);\n            throw error;\n        }\n    }\n    // Get player info\n    async getPlayerInfo(playerAddress) {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const result = await this.client.view({\n                function: \"\".concat(this.moduleAddress, \"::escrow::get_player_info\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress,\n                    playerAddress\n                ]\n            });\n            if (result && result.length >= 3) {\n                return {\n                    hasDeposited: Boolean(result[0]),\n                    depositAmount: Number(result[1]) / 100000000,\n                    signedGameStart: Boolean(result[2])\n                };\n            }\n            throw new Error(\"Invalid player info result\");\n        } catch (error) {\n            console.error(\"Error getting player info:\", error);\n            throw error;\n        }\n    }\n    // Get total escrowed amount\n    async getTotalEscrowedAmount() {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const result = await this.client.view({\n                function: \"\".concat(this.moduleAddress, \"::escrow::get_total_escrowed_amount\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress\n                ]\n            });\n            if (result && result.length > 0) {\n                // Convert octas to APT\n                return Number(result[0]) / 100000000;\n            }\n            return 0;\n        } catch (error) {\n            console.error(\"Error getting total escrowed amount:\", error);\n            throw error;\n        }\n    }\n    // Get game time remaining\n    async getGameTimeRemaining() {\n        if (!this.escrowAddress) {\n            throw new Error(\"Escrow address not set\");\n        }\n        try {\n            const result = await this.client.view({\n                function: \"\".concat(this.moduleAddress, \"::escrow::get_game_time_remaining\"),\n                type_arguments: [],\n                arguments: [\n                    this.escrowAddress\n                ]\n            });\n            // The result will be an array with the Option<u64>\n            if (result && result.length > 0 && result[0]) {\n                return Number(result[0]);\n            }\n            return null; // None case (game not started or not in playing state)\n        } catch (error) {\n            console.error(\"Error getting game time remaining:\", error);\n            throw error;\n        }\n    }\n    // Helper method to submit a transaction\n    async submitTransaction(sender, payload) {\n        try {\n            // For direct wallet API (window.aptos) - try this first\n            if ( true && window.aptos) {\n                console.log(\"Using window.aptos wallet for transaction\");\n                return await window.aptos.signAndSubmitTransaction(payload);\n            }\n            // For Petra and similar wallets\n            if (sender && sender.signAndSubmitTransaction) {\n                console.log(\"Using provided wallet for transaction\");\n                return await sender.signAndSubmitTransaction(payload);\n            }\n            // If we get here, no compatible wallet was found\n            console.error(\"No compatible wallet found for transaction\");\n            throw new Error(\"No compatible wallet found\");\n        } catch (error) {\n            console.error(\"Transaction error:\", error);\n            throw error;\n        }\n    }\n    constructor(nodeUrl, moduleAddress){\n        this.escrowAddress = null;\n        this.client = new aptos__WEBPACK_IMPORTED_MODULE_0__.AptosClient(nodeUrl);\n        this.moduleAddress = moduleAddress;\n        // No longer setting escrow address to module address by default\n        console.log(\"Adapter created with module address:\", moduleAddress);\n    }\n}\nvar DisputeResolution;\n(function(DisputeResolution) {\n    DisputeResolution[DisputeResolution[\"DRAW\"] = 0] = \"DRAW\";\n    DisputeResolution[DisputeResolution[\"PLAYER1_WINS\"] = 1] = \"PLAYER1_WINS\";\n    DisputeResolution[DisputeResolution[\"PLAYER2_WINS\"] = 2] = \"PLAYER2_WINS\";\n    DisputeResolution[DisputeResolution[\"CANCEL\"] = 3] = \"CANCEL\";\n})(DisputeResolution || (DisputeResolution = {}));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/contracts/EscrowContractAdapter.ts\n"));

/***/ })

});